{"ast":null,"code":"var _jsxFileName = \"/Users/benjamincritoph/Programming/React/chess/src/Board.js\";\nimport './Board.css';\nimport React from 'react';\nimport Square from './Square';\nimport { Piece, Pawn, Bishop, Knight, Rook, Queen, King } from './Pieces';\nimport { arrayEquals } from './Helpers';\nimport ChessGame from './ChessGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BLACK = false;\nconst WHITE = true;\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: this.setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false\n    };\n    this.resetBoard = this.resetBoard.bind(this);\n  }\n\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n\n    if (board[or][oc].type === board[r][c].type && !(or === r && oc === c)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  selectPiece(selectedPiecePos) {\n    const [r, c] = selectedPiecePos;\n    const {\n      board,\n      lastSelectedPiecePos,\n      kingPos,\n      inCheck,\n      castleCheck,\n      lastEnPassant,\n      draw,\n      turn\n    } = this.state;\n\n    if (lastSelectedPiecePos && !this.changeSelection(board, lastSelectedPiecePos, selectedPiecePos)) {\n      if (arrayEquals(selectedPiecePos, lastSelectedPiecePos)) {\n        this.setState({\n          lastSelectedPiecePos: false,\n          legalMoves: []\n        });\n        return;\n      }\n\n      const [or, oc] = lastSelectedPiecePos;\n      const lastSelectedPiece = board[or][oc];\n      const retBoard = Game.move(board, lastSelectedPiecePos, selectedPiecePos, lastSelectedPiece, kingPos, inCheck, castleCheck, lastEnPassant, draw);\n\n      if (retBoard.checkmate) {\n        this.setState({\n          winner: lastSelectedPiece.type,\n          checkmate: true,\n          inCheck: true,\n          legalMoves: [],\n          lastSelectedPiecePos: false,\n          turn: !turn\n        });\n        return;\n      } else if (retBoard.draw) {\n        this.setState({\n          draw: true,\n          legalMoves: [],\n          lastSelectedPiecePos: false,\n          turn: !turn\n        });\n        return;\n      } else if (retBoard.board) {\n        this.setState({\n          board: retBoard.board,\n          lastSelectedPiecePos: false,\n          turn: !turn,\n          legalMoves: [],\n          kingPos: retBoard.kingPos,\n          inCheck: retBoard.inCheck,\n          checkmate: retBoard.checkmate,\n          castleCheck: retBoard.castleCheck,\n          lastEnPassant: retBoard.lastEnPassant\n        });\n      }\n\n      return;\n    }\n\n    const selectedPiece = board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== turn) return;\n    const kIdx = selectedPiece.type ? 0 : 1;\n    const cIdx = selectedPiece.type ? 0 : 1;\n    const lMoves = selectedPiece.allowedMoves(board, selectedPiecePos, selectedPiece, kingPos[kIdx], castleCheck[cIdx], lastEnPassant);\n    this.setState({\n      lastSelectedPiecePos: selectedPiecePos,\n      legalMoves: lMoves\n    });\n  }\n\n  setupBoard() {\n    let board = [];\n    const {\n      nRows,\n      nCols\n    } = this.props; // Generate Empty Board\n\n    for (let r = nRows - 1; r >= 0; r--) {\n      let row = [];\n\n      for (let c = 0; c < nCols; c++) {\n        row.push(\"-\");\n      }\n\n      board.push(row);\n    } // Display White Pieces\n\n\n    board[0][0] = new Rook(WHITE, \"w_r\", [0, 0]);\n    board[0][1] = new Knight(WHITE, \"w_kn\", [0, 1]);\n    board[0][2] = new Bishop(WHITE, \"w_b\", [0, 2]);\n    board[0][3] = new Queen(WHITE, \"w_q\", [0, 3]);\n    board[0][4] = new King(WHITE, \"w_k\", [0, 4]);\n    board[0][5] = new Bishop(WHITE, \"w_b\", [0, 5]);\n    board[0][6] = new Knight(WHITE, \"w_kn\", [0, 6]);\n    board[0][7] = new Rook(WHITE, \"w_r\", [0, 7]); // Display Black Pieces\n\n    board[7][0] = new Rook(BLACK, \"b_r\", [7, 0]);\n    board[7][1] = new Knight(BLACK, \"b_kn\", [7, 1]);\n    board[7][2] = new Bishop(BLACK, \"b_b\", [7, 2]);\n    board[7][3] = new Queen(BLACK, \"b_q\", [7, 3]);\n    board[7][4] = new King(BLACK, \"b_k\", [7, 4]);\n    board[7][5] = new Bishop(BLACK, \"b_b\", [7, 5]);\n    board[7][6] = new Knight(BLACK, \"b_kn\", [7, 6]);\n    board[7][7] = new Rook(BLACK, \"b_r\", [7, 7]); // Display Pawns\n\n    for (let c = 0; c < 8; c++) {\n      board[1][c] = new Pawn(WHITE, \"w_p\", [1, c]);\n      board[6][c] = new Pawn(BLACK, \"b_p\", [6, c]);\n    }\n\n    return board;\n  }\n\n  resetBoard() {\n    this.setState({\n      board: this.setupBoard(),\n      selectedPiece: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false\n    });\n    Game = new ChessGame();\n  }\n\n  render() {\n    const {\n      board,\n      turn\n    } = this.state; // Render Chess Board\n\n    let winMessage = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.winner ? \"White Wins!!!\" : \"Black Wins!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 22\n    }, this);\n\n    let chessBoard = [];\n    let cOdd = true;\n    let rOdd = true;\n\n    for (let i = this.props.nRows - 1; i >= 0; i--) {\n      let row = [];\n      cOdd = rOdd;\n\n      for (let j = 0; j < this.props.nCols; j++) {\n        const sqr = `${String.fromCharCode(97 + j)}${i}`;\n        const isDark = cOdd ? true : false;\n        const piece = board[i][j];\n        const pos = [i, j];\n        const isSelected = arrayEquals(pos, this.state.selectedPiece);\n        const isLegalMove = this.state.legalMoves.some(lm => arrayEquals(lm, pos) ? true : false);\n        const isCheckmate = this.state.checkmate;\n        const draw = this.state.draw && piece instanceof King && turn === piece.type;\n        const inCheck = piece instanceof King && this.state.inCheck && turn === piece.type;\n        row.push( /*#__PURE__*/_jsxDEV(Square, {\n          isDark: isDark,\n          piece: piece,\n          selectPiece: () => this.selectPiece([i, j]),\n          isSelected: isSelected,\n          isLegal: isLegalMove,\n          inCheck: inCheck,\n          isCheckmate: isCheckmate,\n          draw: draw\n        }, sqr, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 18\n        }, this));\n        cOdd = !cOdd;\n      }\n\n      chessBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 23\n      }, this));\n      rOdd = !rOdd;\n    } // Render Chess Pieces\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Table\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: chessBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetBoard,\n        className: \"Reset\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  nRows: 8,\n  nCols: 8\n};\nexport default Board;","map":{"version":3,"names":["React","Square","Piece","Pawn","Bishop","Knight","Rook","Queen","King","arrayEquals","ChessGame","BLACK","WHITE","Game","Board","Component","constructor","props","state","board","setupBoard","lastSelectedPiecePos","turn","legalMoves","kingPos","inCheck","checkmate","winner","castleCheck","lastEnPassant","draw","resetBoard","bind","changeSelection","selectedPiece","newPos","r","c","or","oc","type","selectPiece","selectedPiecePos","setState","lastSelectedPiece","retBoard","move","kIdx","cIdx","lMoves","allowedMoves","nRows","nCols","row","push","render","winMessage","chessBoard","cOdd","rOdd","i","j","sqr","String","fromCharCode","isDark","piece","pos","isSelected","isLegalMove","some","lm","isCheckmate","defaultProps"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/Board.js"],"sourcesContent":["import './Board.css'\nimport React from 'react'\nimport Square from './Square';\nimport {Piece, Pawn, Bishop, Knight, Rook, Queen, King} from './Pieces';\nimport { arrayEquals } from './Helpers';\nimport ChessGame from './ChessGame';\n\nconst BLACK = false\nconst WHITE = true\n\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  static defaultProps = {\n    nRows: 8,\n    nCols: 8,\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: this.setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck:  [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false\n    }\n    this.resetBoard = this.resetBoard.bind(this);\n  }\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n    if ((board[or][oc].type === board[r][c].type) && !(or === r && oc === c)) {\n      return true;\n    }\n    return false;\n  }\n\n  selectPiece(selectedPiecePos) {\n    const [r, c] = selectedPiecePos;\n    const {board, lastSelectedPiecePos, kingPos, inCheck, castleCheck, lastEnPassant, draw, turn} = this.state;\n    if (lastSelectedPiecePos && !this.changeSelection(board, lastSelectedPiecePos, selectedPiecePos)) {\n      if (arrayEquals(selectedPiecePos, lastSelectedPiecePos)){\n        this.setState({lastSelectedPiecePos: false, legalMoves: []})\n        return;\n      } \n      const [or, oc] = lastSelectedPiecePos;\n      const lastSelectedPiece = board[or][oc];\n      const retBoard = Game.move(board, lastSelectedPiecePos, selectedPiecePos, lastSelectedPiece, kingPos, inCheck, castleCheck, lastEnPassant, draw);\n      if (retBoard.checkmate) {\n        this.setState({winner: lastSelectedPiece.type, checkmate: true, inCheck: true, legalMoves: [], lastSelectedPiecePos: false, turn: !turn});\n        return;\n      }\n      else if (retBoard.draw) {\n        this.setState({draw: true, legalMoves: [], lastSelectedPiecePos: false, turn: !turn});\n        return;\n      }\n      else if (retBoard.board){\n        this.setState({\n          board: retBoard.board, \n          lastSelectedPiecePos: false, \n          turn: !turn, \n          legalMoves: [], \n          kingPos: retBoard.kingPos, \n          inCheck: retBoard.inCheck, \n          checkmate: retBoard.checkmate, \n          castleCheck: retBoard.castleCheck, \n          lastEnPassant: retBoard.lastEnPassant\n        });\n      } \n      return;\n    }\n    const selectedPiece = board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== turn) return;\n    const kIdx = selectedPiece.type? 0 : 1;\n    const cIdx = selectedPiece.type? 0 : 1;\n    const lMoves = selectedPiece.allowedMoves(board, selectedPiecePos, selectedPiece, kingPos[kIdx], castleCheck[cIdx], lastEnPassant);\n    this.setState({lastSelectedPiecePos: selectedPiecePos, legalMoves: lMoves});\n  }\n\n  setupBoard() {\n    let board = [];\n    const {nRows, nCols} = this.props;\n    // Generate Empty Board\n    for (let r = nRows - 1; r >= 0; r--) {\n      let row = []\n      for (let c = 0; c < nCols; c++) {\n        row.push(\"-\") \n      }\n      board.push(row)\n    }\n    // Display White Pieces\n    board[0][0] = new Rook(WHITE, \"w_r\", [0, 0]);\n    board[0][1] = new Knight(WHITE, \"w_kn\", [0, 1]);\n    board[0][2] = new Bishop(WHITE, \"w_b\", [0, 2]);\n    board[0][3] = new Queen(WHITE, \"w_q\", [0, 3]);\n    board[0][4] = new King(WHITE, \"w_k\", [0, 4]);\n    board[0][5] = new Bishop(WHITE, \"w_b\", [0, 5]);\n    board[0][6] = new Knight(WHITE, \"w_kn\", [0, 6]);\n    board[0][7] = new Rook(WHITE, \"w_r\", [0, 7]);\n    // Display Black Pieces\n    board[7][0] = new Rook(BLACK, \"b_r\", [7, 0]);\n    board[7][1] = new Knight(BLACK, \"b_kn\", [7, 1]);\n    board[7][2] = new Bishop(BLACK, \"b_b\", [7, 2]);\n    board[7][3] = new Queen(BLACK, \"b_q\", [7, 3]);\n    board[7][4] = new King(BLACK, \"b_k\", [7, 4]);\n    board[7][5] = new Bishop(BLACK, \"b_b\", [7, 5]);\n    board[7][6] = new Knight(BLACK, \"b_kn\", [7, 6]);\n    board[7][7] = new Rook(BLACK, \"b_r\", [7, 7]);\n    // Display Pawns\n    for(let c = 0; c < 8; c++){\n      board[1][c] = new Pawn(WHITE, \"w_p\", [1, c]);\n      board[6][c] = new Pawn(BLACK, \"b_p\", [6, c]);\n    }\n    return board;\n  }\n\n  resetBoard(){\n    this.setState({\n      board: this.setupBoard(), \n      selectedPiece: false, \n      turn: WHITE, \n      legalMoves: [], \n      kingPos: [[0, 4], [7, 4]], \n      inCheck: false, \n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false, \n      draw: false\n    });\n    Game = new ChessGame();\n  }\n  render(){\n    const {board, turn} = this.state;\n    // Render Chess Board\n    let winMessage = <div>{this.state.winner? \"White Wins!!!\" : \"Black Wins!!!\"}</div>\n    let chessBoard = [];\n    let cOdd = true;\n    let rOdd = true;\n    for(let i = this.props.nRows - 1; i >= 0; i--){\n      let row = [] \n      cOdd = rOdd\n      for(let j = 0; j < this.props.nCols; j++){\n        const sqr = `${String.fromCharCode(97 + j)}${i}`\n        const isDark = cOdd? true: false;\n        const piece = board[i][j];\n        const pos = [i, j];\n        const isSelected = arrayEquals(pos, this.state.selectedPiece);\n        const isLegalMove = this.state.legalMoves.some(lm => arrayEquals(lm, pos)? true : false);\n        const isCheckmate = this.state.checkmate;\n        const draw = this.state.draw && piece instanceof King && (turn === piece.type);\n        const inCheck = piece instanceof King && this.state.inCheck && (turn === piece.type);\n        row.push(<Square key={sqr} isDark={isDark} piece={piece} selectPiece={() => this.selectPiece([i,j])} isSelected={isSelected} isLegal={isLegalMove} inCheck={inCheck} isCheckmate={isCheckmate} draw={draw}/>)\n        cOdd = !cOdd;\n      }\n      chessBoard.push(<tr key={i}>{row}</tr>)   \n      rOdd = !rOdd;  \n    }\n    // Render Chess Pieces\n    return (\n      <div className=\"Board\">\n        <table className=\"Table\">\n          <tbody>\n            {chessBoard}\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard}className=\"Reset\">Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module"}