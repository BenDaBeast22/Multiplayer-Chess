{"ast":null,"code":"var _jsxFileName = \"/Users/benjamincritoph/Programming/React/chess/Client/src/Board.js\";\nimport './Board.css';\nimport React from 'react';\nimport Square from './Square';\nimport { Piece, King, Queen, Knight, Bishop, Rook } from './Pieces';\nimport { arrayEquals, setupBoard } from './Helpers';\nimport { Howl, Howler } from 'howler';\nimport ChessGame from './ChessGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BLACK = false;\nconst WHITE = true;\nconst soundEffects = {\n  whiteMove: \"./whiteMove.wav\",\n  blackMove: \"./blackMove.wav\"\n};\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false,\n      promotePawn: false\n    };\n    this.resetBoard = this.resetBoard.bind(this);\n    this.dropMove = this.dropMove.bind(this);\n    this.selectPromote = this.selectPromote.bind(this);\n  } // Checks to see if another piece is selected\n\n\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n\n    if (board[or][oc].type === board[r][c].type && !(or === r && oc === c)) {\n      return true;\n    }\n\n    return false;\n  } // Called when a player promotes a pawn and selects piece to promote to\n\n\n  selectPromote(selectedPiecePos, newPiece) {\n    const [pr, pc] = selectedPiecePos;\n    const {\n      kingPos,\n      castleCheck,\n      lastEnPassant,\n      turn\n    } = this.state;\n    const kIdx = newPiece.type ? 0 : 1;\n    const kOppIdx = kIdx ? 0 : 1;\n    const newBoard = this.state.board;\n    newBoard[pr][pc] = newPiece;\n    console.log(\"color\", turn === WHITE ? \"White\" : \"Black\"); // Check if opponent in check\n\n    const inCheck = Game.checkedOpponent(newBoard, newPiece.type, kingPos[kOppIdx]); // Check for checkmate\n\n    if (inCheck && Game.isCheckmate(newBoard, newPiece, kingPos[kOppIdx])) {\n      console.log(\"CHEKMATE\");\n      this.setState({\n        board: newBoard,\n        winner: newPiece.type,\n        checkmate: true,\n        inCheck: true,\n        legalMoves: [],\n        lastSelectedPiecePos: false,\n        promotePawn: false\n      });\n    } // Check for draw\n    else if (Game.draw(newBoard, newPiece, kingPos[kOppIdx], castleCheck, lastEnPassant)) {\n      this.setState({\n        board: newBoard,\n        draw: true,\n        legalMoves: [],\n        lastSelectedPiecePos: false,\n        promotePawn: false\n      });\n    } else {\n      this.setState({\n        board: newBoard,\n        lastSelectedPiecePos: false,\n        legalMoves: [],\n        inCheck: inCheck,\n        promotePawn: false\n      });\n    }\n  } // Called when player clicks on a piece\n\n\n  selectPiece(selectedPiecePos) {\n    const [r, c] = selectedPiecePos;\n    const {\n      board,\n      lastSelectedPiecePos,\n      kingPos,\n      inCheck,\n      castleCheck,\n      lastEnPassant,\n      draw,\n      turn,\n      promotePawn\n    } = this.state; // If a move is made\n\n    if (lastSelectedPiecePos && !this.changeSelection(board, lastSelectedPiecePos, selectedPiecePos)) {\n      if (arrayEquals(selectedPiecePos, lastSelectedPiecePos)) {\n        this.setState({\n          lastSelectedPiecePos: false,\n          legalMoves: []\n        });\n        return;\n      }\n\n      const [or, oc] = lastSelectedPiecePos;\n      const lastSelectedPiece = board[or][oc];\n      const retBoard = Game.move(board, lastSelectedPiecePos, selectedPiecePos, lastSelectedPiece, kingPos, inCheck, castleCheck, lastEnPassant, draw);\n\n      if (retBoard.checkmate) {\n        this.setState({\n          winner: lastSelectedPiece.type,\n          checkmate: true,\n          inCheck: true,\n          legalMoves: [],\n          lastSelectedPiecePos: false,\n          turn: !turn\n        });\n        return;\n      } else if (retBoard.draw) {\n        this.setState({\n          draw: true,\n          legalMoves: [],\n          lastSelectedPiecePos: false,\n          turn: !turn\n        });\n        return;\n      } else if (retBoard.board) {\n        this.setState({\n          board: retBoard.board,\n          lastSelectedPiecePos: false,\n          turn: !turn,\n          legalMoves: [],\n          kingPos: retBoard.kingPos,\n          inCheck: retBoard.inCheck,\n          checkmate: retBoard.checkmate,\n          castleCheck: retBoard.castleCheck,\n          lastEnPassant: retBoard.lastEnPassant,\n          promotePawn: retBoard.promotePawn\n        });\n\n        if (turn === WHITE) {\n          this.playSound(\"./soundEffects/whiteMove.wav\");\n        } else this.playSound(\"./soundEffects/blackMove.wav\");\n      }\n\n      return;\n    } // If piece is selected or switch to another piece\n\n\n    const selectedPiece = board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== turn) return;\n    const kIdx = selectedPiece.type ? 0 : 1;\n    const cIdx = selectedPiece.type ? 0 : 1; // Show legal moves when piece is selected\n\n    const lMoves = selectedPiece.allowedMoves(board, selectedPiecePos, selectedPiece, kingPos[kIdx], castleCheck[cIdx], lastEnPassant);\n    this.setState({\n      lastSelectedPiecePos: selectedPiecePos,\n      legalMoves: lMoves\n    });\n  }\n\n  dropMove(movedSqr) {\n    this.selectPiece(movedSqr);\n  }\n\n  playSound(src) {\n    const sound = new Howl({\n      src\n    });\n    sound.play();\n  }\n\n  selectorSquares(pawnPromote) {\n    let arr = [];\n    const [r, c] = pawnPromote;\n    const turn = r === 7 ? WHITE : BLACK;\n\n    if (turn === WHITE) {\n      arr.push(new Bishop(WHITE, \"w_b\"), new Rook(WHITE, \"w_r\"), new Knight(WHITE, \"w_kn\"), new Queen(WHITE, \"w_q\"));\n    } else {\n      arr.push(new Queen(BLACK, \"b_q\"), new Knight(BLACK, \"b_kn\"), new Rook(BLACK, \"b_r\"), new Bishop(BLACK, \"b_b\"));\n    }\n\n    return arr;\n  }\n\n  selectorSquare(pawnPromote, selectSquares, pos) {\n    const [pr, pc] = pawnPromote;\n    const [r, c] = pos;\n    const turn = pr === 7 ? WHITE : BLACK;\n\n    if (turn === WHITE) {\n      if (c === pc && r >= 4 && r < 8) {\n        console.log(\"pr = \", pr);\n        return selectSquares[r - 4];\n      }\n    } else {\n      if (c === pc && r <= 3) {\n        return selectSquares[r];\n      }\n    }\n  } // Resets chessboard state\n\n\n  resetBoard() {\n    this.setState({\n      board: setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false,\n      promotePawn: false\n    });\n    Game = new ChessGame();\n  }\n\n  render() {\n    const {\n      board,\n      lastSelectedPiecePos,\n      turn,\n      legalMoves,\n      inCheck,\n      checkmate,\n      draw,\n      winner,\n      promotePawn\n    } = this.state;\n\n    let winMessage = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: winner ? \"White Wins!!!\" : \"Black Wins!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 22\n    }, this);\n\n    let chessBoard = [];\n    let cOdd = true;\n    let rOdd = true;\n    let selectorSquares;\n    let selectorSquare;\n    let pr, pc;\n\n    if (promotePawn) {\n      selectorSquares = this.selectorSquares(promotePawn);\n      console.log(selectorSquares);\n    } // Iterated through rows backwards so that white would be at row 0 similar to chess notation\n\n\n    for (let r = 7; r >= 0; r--) {\n      let row = [];\n      cOdd = rOdd;\n\n      for (let c = 0; c < this.props.nCols; c++) {\n        const sqr = `${String.fromCharCode(97 + c)}${r + 1}`;\n        const isDark = cOdd ? true : false;\n        const piece = board[r][c];\n        const pos = [r, c];\n        const isSelected = arrayEquals(pos, lastSelectedPiecePos);\n        const isLegalMove = legalMoves.some(lm => arrayEquals(lm, pos) ? true : false);\n        const isDraw = draw && piece instanceof King && turn === piece.type;\n        const kingInCheck = piece instanceof King && inCheck && turn === piece.type;\n        selectorSquare = false;\n\n        if (promotePawn) {\n          [pr, pc] = promotePawn;\n          selectorSquare = this.selectorSquare(promotePawn, selectorSquares, pos);\n          console.log(selectorSquare);\n        }\n\n        row.push( /*#__PURE__*/_jsxDEV(Square, {\n          pos: pos,\n          isDark: isDark,\n          piece: piece,\n          selectPiece: () => this.selectPiece([r, c]),\n          isSelected: isSelected,\n          isLegal: isLegalMove,\n          inCheck: kingInCheck,\n          isCheckmate: checkmate,\n          draw: isDraw,\n          dropMove: this.dropMove,\n          selectorSquare: selectorSquare,\n          selectPromote: this.selectPromote,\n          promotePos: promotePawn,\n          turn: turn\n        }, sqr, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 18\n        }, this));\n        cOdd = !cOdd;\n      }\n\n      chessBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        className: \"Row\",\n        children: row\n      }, r + 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 23\n      }, this));\n      rOdd = !rOdd;\n    } // Render Chess Pieces\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board noselect\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Table\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: chessBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetBoard,\n        className: \"newGame\",\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  nRows: 8,\n  nCols: 8\n};\nexport default Board;","map":{"version":3,"names":["React","Square","Piece","King","Queen","Knight","Bishop","Rook","arrayEquals","setupBoard","Howl","Howler","ChessGame","BLACK","WHITE","soundEffects","whiteMove","blackMove","Game","Board","Component","constructor","props","state","board","lastSelectedPiecePos","turn","legalMoves","kingPos","inCheck","checkmate","winner","castleCheck","lastEnPassant","draw","promotePawn","resetBoard","bind","dropMove","selectPromote","changeSelection","selectedPiece","newPos","r","c","or","oc","type","selectedPiecePos","newPiece","pr","pc","kIdx","kOppIdx","newBoard","console","log","checkedOpponent","isCheckmate","setState","selectPiece","lastSelectedPiece","retBoard","move","playSound","cIdx","lMoves","allowedMoves","movedSqr","src","sound","play","selectorSquares","pawnPromote","arr","push","selectorSquare","selectSquares","pos","render","winMessage","chessBoard","cOdd","rOdd","row","nCols","sqr","String","fromCharCode","isDark","piece","isSelected","isLegalMove","some","lm","isDraw","kingInCheck","defaultProps","nRows"],"sources":["/Users/benjamincritoph/Programming/React/chess/Client/src/Board.js"],"sourcesContent":["import './Board.css'\nimport React from 'react'\nimport Square from './Square';\nimport { Piece, King, Queen, Knight, Bishop, Rook } from './Pieces';\nimport { arrayEquals, setupBoard } from './Helpers';\nimport { Howl, Howler } from 'howler';\nimport ChessGame from './ChessGame';\n\nconst BLACK = false\nconst WHITE = true\n\nconst soundEffects = {\n  whiteMove: \"./whiteMove.wav\",\n  blackMove: \"./blackMove.wav\"\n}\n\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  static defaultProps = {\n    nRows: 8,\n    nCols: 8,\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false, \n      promotePawn: false, \n      \n    }\n    this.resetBoard = this.resetBoard.bind(this);\n    this.dropMove = this.dropMove.bind(this);\n    this.selectPromote = this.selectPromote.bind(this);\n  }\n  // Checks to see if another piece is selected\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n    if ((board[or][oc].type === board[r][c].type) && !(or === r && oc === c)) {\n      return true;\n    }\n    return false;\n  }\n  // Called when a player promotes a pawn and selects piece to promote to\n  selectPromote(selectedPiecePos, newPiece) {\n    const [pr, pc] = selectedPiecePos;\n    const {kingPos, castleCheck, lastEnPassant, turn} = this.state;\n    const kIdx = newPiece.type? 0 : 1;\n    const kOppIdx = kIdx? 0: 1;\n    const newBoard = this.state.board;\n    newBoard[pr][pc] = newPiece;\n    console.log(\"color\", turn === WHITE? \"White\": \"Black\");\n\n    // Check if opponent in check\n    const inCheck = Game.checkedOpponent(newBoard, newPiece.type, kingPos[kOppIdx]);\n    // Check for checkmate\n    if (inCheck && Game.isCheckmate(newBoard, newPiece, kingPos[kOppIdx])) {\n      console.log(\"CHEKMATE\")\n      this.setState({board: newBoard, winner: newPiece.type, checkmate: true, inCheck: true, legalMoves: [], lastSelectedPiecePos: false, promotePawn: false});\n    }\n    // Check for draw\n    else if (Game.draw(newBoard, newPiece, kingPos[kOppIdx], castleCheck, lastEnPassant)) {\n      this.setState({board: newBoard, draw: true, legalMoves: [], lastSelectedPiecePos: false, promotePawn: false});\n    } \n    else {\n      this.setState({\n        board: newBoard, \n        lastSelectedPiecePos: false, \n        legalMoves: [], \n        inCheck: inCheck, \n        promotePawn: false\n      });\n    }\n  }\n\n  // Called when player clicks on a piece\n  selectPiece(selectedPiecePos) {\n    const [r, c] = selectedPiecePos;\n    const {board, lastSelectedPiecePos, kingPos, inCheck, castleCheck, lastEnPassant, draw, turn, promotePawn} = this.state;\n\n    // If a move is made\n    if (lastSelectedPiecePos && !this.changeSelection(board, lastSelectedPiecePos, selectedPiecePos)) {\n      if (arrayEquals(selectedPiecePos, lastSelectedPiecePos)){\n        this.setState({lastSelectedPiecePos: false, legalMoves: []})\n        return;\n      } \n      const [or, oc] = lastSelectedPiecePos;\n      const lastSelectedPiece = board[or][oc];\n      const retBoard = Game.move(board, lastSelectedPiecePos, selectedPiecePos, lastSelectedPiece, kingPos, inCheck, castleCheck, lastEnPassant, draw);\n      if (retBoard.checkmate) {\n        this.setState({winner: lastSelectedPiece.type, checkmate: true, inCheck: true, legalMoves: [], lastSelectedPiecePos: false, turn: !turn});\n        return;\n      }\n      else if (retBoard.draw) {\n        this.setState({draw: true, legalMoves: [], lastSelectedPiecePos: false, turn: !turn});\n        return;\n      }\n      else if (retBoard.board){\n        this.setState({\n          board: retBoard.board, \n          lastSelectedPiecePos: false, \n          turn: !turn, \n          legalMoves: [], \n          kingPos: retBoard.kingPos, \n          inCheck: retBoard.inCheck, \n          checkmate: retBoard.checkmate, \n          castleCheck: retBoard.castleCheck, \n          lastEnPassant: retBoard.lastEnPassant,\n          promotePawn: retBoard.promotePawn\n        });\n        if (turn === WHITE) {\n          this.playSound(\"./soundEffects/whiteMove.wav\");\n        }\n        else this.playSound(\"./soundEffects/blackMove.wav\");\n      } \n      return;\n    }\n    // If piece is selected or switch to another piece\n    const selectedPiece = board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== turn) return;\n    const kIdx = selectedPiece.type? 0 : 1;\n    const cIdx = selectedPiece.type? 0 : 1;\n    // Show legal moves when piece is selected\n    const lMoves = selectedPiece.allowedMoves(board, selectedPiecePos, selectedPiece, kingPos[kIdx], castleCheck[cIdx], lastEnPassant);\n    this.setState({lastSelectedPiecePos: selectedPiecePos, legalMoves: lMoves});\n  }\n  dropMove(movedSqr) {\n    this.selectPiece(movedSqr);\n  }\n  playSound(src) {\n    const sound = new Howl({src});\n    sound.play();\n  }\n  selectorSquares (pawnPromote) {\n    let arr = [];\n    const [r, c] = pawnPromote;\n    const turn = (r === 7)? WHITE : BLACK;\n    if (turn === WHITE) {\n      arr.push(\n        new Bishop(WHITE, \"w_b\"),\n        new Rook(WHITE, \"w_r\"), \n        new Knight(WHITE, \"w_kn\"), \n        new Queen(WHITE, \"w_q\") \n      );\n    } else {\n      arr.push(\n        new Queen(BLACK, \"b_q\"),\n        new Knight(BLACK, \"b_kn\"),\n        new Rook(BLACK, \"b_r\"),\n        new Bishop(BLACK, \"b_b\")\n      );\n    }\n    return arr;\n  }\n  selectorSquare (pawnPromote, selectSquares, pos){\n    const [pr, pc] = pawnPromote;\n    const [r, c] = pos;\n    const turn = (pr === 7)? WHITE : BLACK;\n    if (turn === WHITE) {\n      if (c === pc && (r >= 4 && r < 8)) {\n        console.log(\"pr = \",pr)\n        return selectSquares[r - 4];\n      }\n    } else {\n      if (c === pc && (r <= 3)) {\n        return selectSquares[r];\n      }\n    }\n  }\n  // Resets chessboard state\n  resetBoard(){\n    this.setState({\n      board: setupBoard(), \n      lastSelectedPiecePos: false, \n      turn: WHITE, \n      legalMoves: [], \n      kingPos: [[0, 4], [7, 4]], \n      inCheck: false, \n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false, \n      draw: false,\n      promotePawn: false\n    });\n    Game = new ChessGame();\n  }\n  render(){\n    const {board, lastSelectedPiecePos, turn, legalMoves, inCheck, checkmate, draw, winner, promotePawn} = this.state;\n    let winMessage = <div>{winner? \"White Wins!!!\" : \"Black Wins!!!\"}</div>\n    let chessBoard = [];\n    let cOdd = true;\n    let rOdd = true;\n    let selectorSquares;\n    let selectorSquare;\n    let pr, pc;\n    if (promotePawn) {\n      selectorSquares = this.selectorSquares(promotePawn);\n      console.log(selectorSquares);\n    }\n    // Iterated through rows backwards so that white would be at row 0 similar to chess notation\n    for(let r = 7; r >= 0; r--){\n      let row = [] \n      cOdd = rOdd;\n      for(let c = 0; c < this.props.nCols; c++){\n        const sqr = `${String.fromCharCode(97 + c)}${r + 1}`;\n        const isDark = cOdd? true: false;\n        const piece = board[r][c];\n        const pos = [r, c];\n        const isSelected = arrayEquals(pos, lastSelectedPiecePos);\n        const isLegalMove = legalMoves.some(lm => arrayEquals(lm, pos)? true : false);\n        const isDraw = draw && piece instanceof King && (turn === piece.type);\n        const kingInCheck = piece instanceof King && inCheck && (turn === piece.type);\n        selectorSquare = false;\n        if (promotePawn) {\n          [pr, pc] = promotePawn;\n          selectorSquare = this.selectorSquare(promotePawn, selectorSquares, pos); \n          console.log(selectorSquare)\n        }\n        row.push(<Square key={sqr} pos={pos} isDark={isDark} piece={piece} selectPiece={() => this.selectPiece([r,c])} isSelected={isSelected} isLegal={isLegalMove} inCheck={kingInCheck} isCheckmate={checkmate} draw={isDraw} dropMove={this.dropMove} selectorSquare={selectorSquare} selectPromote={this.selectPromote} promotePos={promotePawn} turn={turn}/>)\n        cOdd = !cOdd;\n      }\n      chessBoard.push(<tr className=\"Row\" key={r + 1}>{row}</tr>)   \n      rOdd = !rOdd;  \n    }\n    // Render Chess Pieces\n    return (\n      <div className=\"Board noselect\">\n        <table className=\"Table\">\n          <tbody>\n            {chessBoard}\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard}className=\"newGame\">New Game</button>\n      </div>\n    );\n  }\n}\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module"}