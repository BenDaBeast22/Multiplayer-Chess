{"ast":null,"code":"import { arrayEquals } from './Helpers';\nimport { King } from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor() {\n    this.turn = WHITE;\n    this.kingPos = [[0, 4], [7, 4]];\n  }\n\n  isLegalMove(legalMoves, endPos) {\n    // Check that move is legal\n    for (let move of legalMoves) {\n      if (arrayEquals(move, endPos)) {\n        return true;\n      }\n    }\n  }\n\n  isKingAttacked(kingPos, oppSqrsCovered) {}\n\n  opposingSquaresCovered(board, turn) {\n    let squaresCovered = [];\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c >= 0; c++) {\n        const piece = board[r][c];\n\n        if (turn !== piece.type) {\n          squaresCovered.push(piece.legalMoves(board, [r, c], piece));\n        }\n      }\n    }\n\n    return squaresCovered;\n  }\n\n  move(board, startPos, endPos, piece) {\n    // If legal move\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    const legalMoves = piece.legalMoves(board, startPos, piece);\n\n    if (this.isLegalMove(legalMoves, endPos)) {\n      const newBoard = board;\n      newBoard[x][y] = piece; // Check move doesn't allow king to be attacked\n\n      const sqrsCovered = this.opposingSquaresCovered(newBoard, piece.type);\n\n      if (piece instanceof King) {\n        for (let move in sqrsCovered) {\n          if (arrayEquals(move, this.kingPos)) {\n            return false;\n          }\n        }\n      }\n\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      return board;\n    }\n\n    return false;\n  }\n\n}\n\nexport default ChessGame;","map":{"version":3,"names":["arrayEquals","King","BLACK","WHITE","ChessGame","constructor","turn","kingPos","isLegalMove","legalMoves","endPos","move","isKingAttacked","oppSqrsCovered","opposingSquaresCovered","board","squaresCovered","r","c","piece","type","push","startPos","a","b","x","y","newBoard","sqrsCovered"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/ChessGame.js"],"sourcesContent":["import { arrayEquals } from './Helpers';\nimport { King } from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor(){\n    this.turn = WHITE;\n    this.kingPos = [[0, 4], [7, 4]];\n  }\n  isLegalMove(legalMoves, endPos){\n    // Check that move is legal\n    for(let move of legalMoves){\n      if(arrayEquals(move, endPos)){\n        return true;\n      }\n    }\n  }\n  isKingAttacked(kingPos, oppSqrsCovered) {\n\n  }\n  opposingSquaresCovered(board, turn) {\n    let squaresCovered = [];\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c >= 0; c++) {\n        const piece = board[r][c];\n        if (turn !== piece.type) {\n          squaresCovered.push(piece.legalMoves(board, [r, c], piece));\n        }\n\n      }\n    }\n    return squaresCovered;\n\n  }\n  move(board, startPos, endPos, piece) {\n    // If legal move\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    const legalMoves = piece.legalMoves(board, startPos, piece);\n    if(this.isLegalMove(legalMoves, endPos)){\n      const newBoard = board;\n      newBoard[x][y] = piece;\n      // Check move doesn't allow king to be attacked\n      const sqrsCovered = this.opposingSquaresCovered(newBoard, piece.type);\n      if (piece instanceof King) {\n        for (let move in sqrsCovered) {\n          if (arrayEquals(move, this.kingPos)) {\n            return false;\n          }\n        }\n      }\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      return board;\n    }\n    return false;\n  }\n}\n\nexport default ChessGame;"],"mappings":"AAAA,SAASA,WAAT,QAA4B,WAA5B;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,MAAMC,KAAK,GAAG,KAAd;AACA,MAAMC,KAAK,GAAG,IAAd;;AAEA,MAAMC,SAAN,CAAgB;EACdC,WAAW,GAAE;IACX,KAAKC,IAAL,GAAYH,KAAZ;IACA,KAAKI,OAAL,GAAe,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CAAf;EACD;;EACDC,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAoB;IAC7B;IACA,KAAI,IAAIC,IAAR,IAAgBF,UAAhB,EAA2B;MACzB,IAAGT,WAAW,CAACW,IAAD,EAAOD,MAAP,CAAd,EAA6B;QAC3B,OAAO,IAAP;MACD;IACF;EACF;;EACDE,cAAc,CAACL,OAAD,EAAUM,cAAV,EAA0B,CAEvC;;EACDC,sBAAsB,CAACC,KAAD,EAAQT,IAAR,EAAc;IAClC,IAAIU,cAAc,GAAG,EAArB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;QAC3B,MAAMC,KAAK,GAAGJ,KAAK,CAACE,CAAD,CAAL,CAASC,CAAT,CAAd;;QACA,IAAIZ,IAAI,KAAKa,KAAK,CAACC,IAAnB,EAAyB;UACvBJ,cAAc,CAACK,IAAf,CAAoBF,KAAK,CAACV,UAAN,CAAiBM,KAAjB,EAAwB,CAACE,CAAD,EAAIC,CAAJ,CAAxB,EAAgCC,KAAhC,CAApB;QACD;MAEF;IACF;;IACD,OAAOH,cAAP;EAED;;EACDL,IAAI,CAACI,KAAD,EAAQO,QAAR,EAAkBZ,MAAlB,EAA0BS,KAA1B,EAAiC;IACnC;IACA,MAAM,CAACI,CAAD,EAAIC,CAAJ,IAASF,QAAf;IACA,MAAM,CAACG,CAAD,EAAIC,CAAJ,IAAShB,MAAf;IACA,MAAMD,UAAU,GAAGU,KAAK,CAACV,UAAN,CAAiBM,KAAjB,EAAwBO,QAAxB,EAAkCH,KAAlC,CAAnB;;IACA,IAAG,KAAKX,WAAL,CAAiBC,UAAjB,EAA6BC,MAA7B,CAAH,EAAwC;MACtC,MAAMiB,QAAQ,GAAGZ,KAAjB;MACAY,QAAQ,CAACF,CAAD,CAAR,CAAYC,CAAZ,IAAiBP,KAAjB,CAFsC,CAGtC;;MACA,MAAMS,WAAW,GAAG,KAAKd,sBAAL,CAA4Ba,QAA5B,EAAsCR,KAAK,CAACC,IAA5C,CAApB;;MACA,IAAID,KAAK,YAAYlB,IAArB,EAA2B;QACzB,KAAK,IAAIU,IAAT,IAAiBiB,WAAjB,EAA8B;UAC5B,IAAI5B,WAAW,CAACW,IAAD,EAAO,KAAKJ,OAAZ,CAAf,EAAqC;YACnC,OAAO,KAAP;UACD;QACF;MACF;;MACDQ,KAAK,CAACQ,CAAD,CAAL,CAASC,CAAT,IAAc,GAAd;MACAT,KAAK,CAACU,CAAD,CAAL,CAASC,CAAT,IAAcP,KAAd;MACA,OAAOJ,KAAP;IACD;;IACD,OAAO,KAAP;EACD;;AApDa;;AAuDhB,eAAeX,SAAf"},"metadata":{},"sourceType":"module"}