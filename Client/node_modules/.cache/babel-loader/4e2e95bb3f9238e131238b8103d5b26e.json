{"ast":null,"code":"const BLACK = false;\nconst WHITE = true; // Abstract Class\n\nclass Piece {\n  constructor(type, img, pos) {\n    if (this.constructor === Piece) {\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  } // True if row and column are on the board (8x8)\n\n\n  onBoard(r, c) {\n    if (r > 7 || r < 0 || c > 7 || c < 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isPiece(piece) {\n    if (piece instanceof Piece) return true;\n    return false;\n  } // True if piece on the square is the same color as the piece you are moving\n\n\n  sameColor(sqr, piece) {\n    if (sqr instanceof Piece && sqr.type === piece.type) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isOppositePiece(sqr, piece) {\n    if (sqr.type !== piece.type) return true;\n    return false;\n  }\n\n  emptySquare(sqr) {\n    console.log(sqr);\n    return !(sqr instanceof Piece);\n  }\n\n  straightLegalMoves(board, startPos, piece, comp, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n\n    for (let r = rStart + off; comp(r); r += off) {\n      if (this.isPiece(board[r][cStart])) {\n        if (this.isOppositePiece(board[r][cStart], piece)) {\n          lMoves.push([r, cStart]);\n        }\n\n        break;\n      }\n\n      lMoves.push([r, cStart]);\n    }\n\n    return lMoves;\n  }\n\n  horizantalLegalMoves(board, startPos, piece, comp, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n\n    for (let c = cStart + off; comp(c); c += off) {\n      if (this.isPiece(board[rStart][c])) {\n        if (this.isOppositePiece(board[rStart][c], piece)) {\n          lMoves.push([rStart, c]);\n        }\n\n        break;\n      }\n\n      lMoves.push([rStart, c]);\n    }\n\n    return lMoves;\n  }\n\n  diagonalLegalMoves(board, startPos, piece, rOff, cOff) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    let r = rStart + rOff;\n    let c = cStart + cOff;\n\n    while (this.onBoard(r, c)) {\n      if (this.isPiece(board[r][c])) {\n        if (this.isOppositePiece(board[r][c], piece)) {\n          lMoves.push([r, c]);\n        }\n\n        break;\n      }\n\n      lMoves.push([r, c]);\n      r += rOff;\n      c += cOff;\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Pawn extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    let upOne = [];\n    let upOneRight = [];\n    let upOneLeft = [];\n\n    if (pawn.type === WHITE) {\n      upOne = [rStart + 1, cStart]; // Add up two legal move\n\n      if (rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n\n      upOneRight = [rStart + 1, cStart + 1];\n      upOneLeft = [rStart + 1, cStart - 1];\n    } else {\n      upOne = [rStart - 1, cStart]; // Add up two legal move\n\n      if (rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n\n      upOneRight = [rStart - 1, cStart + 1];\n      upOneLeft = [rStart - 1, cStart - 1];\n    } // Add up one legal move\n\n\n    const [uor, uoc] = upOne;\n    if (this.emptySquare(board[uor][uoc])) lMoves.push(upOne); // Add diagonal legal moves\n\n    const diagonal = [upOneRight, upOneLeft];\n\n    for (let move of diagonal) {\n      const [rd, rc] = move;\n\n      if (this.isPiece(board[rd][rc]) && this.isOppositePiece(board[rd][rc], pawn)) {\n        lMoves.push([rd, rc]);\n      }\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Bishop extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, bishopPos, bishop) {\n    const lMoves = [];\n    this.diagonalLegalMoves(board, bishopPos, bishop, 1, 1).forEach(m => lMoves.push(m)); // Up right\n\n    this.diagonalLegalMoves(board, bishopPos, bishop, 1, -1).forEach(m => lMoves.push(m)); // Up left\n\n    this.diagonalLegalMoves(board, bishopPos, bishop, -1, 1).forEach(m => lMoves.push(m)); // Down right\n\n    this.diagonalLegalMoves(board, bishopPos, bishop, -1, -1).forEach(m => lMoves.push(m)); // Down left\n\n    return lMoves;\n  }\n\n}\n\nclass Knight extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [-2, 1], [2, -1], [-2, -1]];\n\n    for (let move of moves) {\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff; // If move sqr is on the board and does not have one of your pieces on it move is valid\n\n      if (this.onBoard(r, c) && !this.sameColor(board[r][c], knight)) {\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Rook extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, rookPos, rook) {\n    let lMoves = [];\n    const upMoves = this.straightLegalMoves(board, rookPos, rook, r => r < 8, 1);\n    const downMoves = this.straightLegalMoves(board, rookPos, rook, r => r >= 0, -1);\n    const rightMoves = this.horizantalLegalMoves(board, rookPos, rook, c => c < 8, 1);\n    const leftMoves = this.horizantalLegalMoves(board, rookPos, rook, c => c >= 0, -1);\n    upMoves.forEach(move => lMoves.push(move));\n    downMoves.forEach(move => lMoves.push(move));\n    leftMoves.forEach(move => lMoves.push(move));\n    rightMoves.forEach(move => lMoves.push(move));\n    return lMoves;\n  }\n\n}\n\nclass Queen extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nclass King extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nexport { Piece, Pawn, Bishop, Knight, Rook, Queen, King };","map":{"version":3,"names":["BLACK","WHITE","Piece","constructor","type","img","pos","Error","imgName","onBoard","r","c","isPiece","piece","sameColor","sqr","isOppositePiece","emptySquare","console","log","straightLegalMoves","board","startPos","comp","off","lMoves","rStart","cStart","push","horizantalLegalMoves","diagonalLegalMoves","rOff","cOff","Pawn","legalMoves","pawnPos","pawn","upOne","upOneRight","upOneLeft","uor","uoc","diagonal","move","rd","rc","Bishop","bishopPos","bishop","forEach","m","Knight","knightPos","knight","moves","lMove","Rook","rookPos","rook","upMoves","downMoves","rightMoves","leftMoves","Queen","King"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/Pieces.js"],"sourcesContent":["const BLACK = false;\nconst WHITE = true;\n\n// Abstract Class\nclass Piece {\n  constructor(type, img, pos){\n    if(this.constructor === Piece){\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  }\n  // True if row and column are on the board (8x8)\n  onBoard(r, c){\n    if(r > 7 || r < 0 || c > 7 || c < 0){\n      return false;\n    }\n    return true;\n  }\n  isPiece(piece) {\n    if (piece instanceof Piece) return true;\n    return false;\n  }\n  // True if piece on the square is the same color as the piece you are moving\n  sameColor(sqr, piece){\n    if(sqr instanceof Piece && sqr.type === piece.type){\n      return true;\n    }\n    return false;\n  }\n  isOppositePiece(sqr, piece) {\n    if (sqr.type !== piece.type) return true;\n    return false;\n  }\n  emptySquare(sqr) {\n    console.log(sqr);\n    return !(sqr instanceof Piece);\n  }\n  straightLegalMoves(board, startPos, piece, comp, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    for (let r = rStart + off; comp(r); r += off) {\n      if (this.isPiece(board[r][cStart])) {\n        if (this.isOppositePiece(board[r][cStart], piece)) {\n          lMoves.push([r, cStart]);\n        }\n        break;\n      }\n      lMoves.push([r, cStart]);\n    }\n    return lMoves;\n  }\n  horizantalLegalMoves(board, startPos, piece, comp, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    for (let c = cStart + off; comp(c); c += off) {\n      if (this.isPiece(board[rStart][c])) {\n        if (this.isOppositePiece(board[rStart][c], piece)) {\n          lMoves.push([rStart, c]);\n        }\n        break;\n      }\n      lMoves.push([rStart, c]);\n    }\n    return lMoves;\n  }\n  diagonalLegalMoves(board, startPos, piece, rOff, cOff) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    let r = rStart + rOff;\n    let c = cStart + cOff;\n    while (this.onBoard(r, c)) {\n      if (this.isPiece(board[r][c])) {\n        if (this.isOppositePiece(board[r][c], piece)) {\n          lMoves.push([r, c]);\n        }\n        break;\n      }\n      lMoves.push([r, c]);\n      r += rOff;\n      c += cOff;\n    }\n    return lMoves;\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    let upOne = [];\n    let upOneRight = [];\n    let upOneLeft = [];\n    if (pawn.type === WHITE) {\n      upOne = [rStart + 1, cStart];\n      // Add up two legal move\n      if(rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n      upOneRight = [rStart + 1, cStart + 1];\n      upOneLeft = [rStart + 1, cStart - 1];\n    } \n    else {\n      upOne = [rStart - 1, cStart];\n      // Add up two legal move\n      if(rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n      upOneRight = [rStart - 1, cStart + 1];\n      upOneLeft = [rStart - 1, cStart - 1];\n    }\n    // Add up one legal move\n    const [uor, uoc] = upOne;\n    if (this.emptySquare(board[uor][uoc])) lMoves.push(upOne);\n    // Add diagonal legal moves\n    const diagonal = [upOneRight, upOneLeft];\n    for (let move of diagonal) {\n      const [rd, rc] = move;\n      if (this.isPiece(board[rd][rc]) && this.isOppositePiece(board[rd][rc], pawn)) {\n        lMoves.push([rd, rc])\n      }\n    }\n    return lMoves;\n  }\n}\n\nclass Bishop extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, bishopPos, bishop) {\n    const lMoves = [];\n    this.diagonalLegalMoves(board, bishopPos, bishop, 1, 1).forEach(m => lMoves.push(m)); // Up right\n    this.diagonalLegalMoves(board, bishopPos, bishop, 1, -1).forEach(m => lMoves.push(m)); // Up left\n    this.diagonalLegalMoves(board, bishopPos, bishop, -1, 1).forEach(m => lMoves.push(m)); // Down right\n    this.diagonalLegalMoves(board, bishopPos, bishop, -1, -1).forEach(m => lMoves.push(m)); // Down left\n    return lMoves;\n  }\n}\n\nclass Knight extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1,2], [-1,2], [1,-2], [-1,-2], [2,1], [-2,1], [2,-1], [-2,-1]];\n    for(let move of moves){\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff;\n      // If move sqr is on the board and does not have one of your pieces on it move is valid\n      if(this.onBoard(r, c) && !this.sameColor(board[r][c], knight)){\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }  \n    }\n    return lMoves;  \n  }\n}\n\nclass Rook extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, rookPos, rook) {\n    let lMoves = [];\n\n    const upMoves = this.straightLegalMoves(board, rookPos, rook, r => r < 8, 1);\n    const downMoves = this.straightLegalMoves(board, rookPos, rook, r => r >= 0, -1);\n    const rightMoves = this.horizantalLegalMoves(board, rookPos, rook, c => c < 8, 1);\n    const leftMoves = this.horizantalLegalMoves(board, rookPos, rook, c => c >= 0, -1);\n    upMoves.forEach(move => lMoves.push(move));\n    downMoves.forEach(move => lMoves.push(move));\n    leftMoves.forEach(move => lMoves.push(move));\n    rightMoves.forEach(move => lMoves.push(move))\n\n    return lMoves;\n  }\n}\n\nclass Queen extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\nclass King extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\n\nexport {Piece, Pawn, Bishop, Knight, Rook, Queen, King};\n"],"mappings":"AAAA,MAAMA,KAAK,GAAG,KAAd;AACA,MAAMC,KAAK,GAAG,IAAd,C,CAEA;;AACA,MAAMC,KAAN,CAAY;EACVC,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,EAAgB;IACzB,IAAG,KAAKH,WAAL,KAAqBD,KAAxB,EAA8B;MAC5B,MAAM,IAAIK,KAAJ,CAAU,sCAAV,CAAN;IACD;;IACD,KAAKH,IAAL,GAAYA,IAAZ;IACA,KAAKI,OAAL,GAAeH,GAAf;IACA,KAAKC,GAAL,GAAWA,GAAX;EACD,CARS,CASV;;;EACAG,OAAO,CAACC,CAAD,EAAIC,CAAJ,EAAM;IACX,IAAGD,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,CAAb,IAAkBC,CAAC,GAAG,CAAtB,IAA2BA,CAAC,GAAG,CAAlC,EAAoC;MAClC,OAAO,KAAP;IACD;;IACD,OAAO,IAAP;EACD;;EACDC,OAAO,CAACC,KAAD,EAAQ;IACb,IAAIA,KAAK,YAAYX,KAArB,EAA4B,OAAO,IAAP;IAC5B,OAAO,KAAP;EACD,CAnBS,CAoBV;;;EACAY,SAAS,CAACC,GAAD,EAAMF,KAAN,EAAY;IACnB,IAAGE,GAAG,YAAYb,KAAf,IAAwBa,GAAG,CAACX,IAAJ,KAAaS,KAAK,CAACT,IAA9C,EAAmD;MACjD,OAAO,IAAP;IACD;;IACD,OAAO,KAAP;EACD;;EACDY,eAAe,CAACD,GAAD,EAAMF,KAAN,EAAa;IAC1B,IAAIE,GAAG,CAACX,IAAJ,KAAaS,KAAK,CAACT,IAAvB,EAA6B,OAAO,IAAP;IAC7B,OAAO,KAAP;EACD;;EACDa,WAAW,CAACF,GAAD,EAAM;IACfG,OAAO,CAACC,GAAR,CAAYJ,GAAZ;IACA,OAAO,EAAEA,GAAG,YAAYb,KAAjB,CAAP;EACD;;EACDkB,kBAAkB,CAACC,KAAD,EAAQC,QAAR,EAAkBT,KAAlB,EAAyBU,IAAzB,EAA+BC,GAA/B,EAAoC;IACpD,MAAMC,MAAM,GAAG,EAAf;IACA,MAAM,CAACC,MAAD,EAASC,MAAT,IAAmBL,QAAzB;;IACA,KAAK,IAAIZ,CAAC,GAAGgB,MAAM,GAAGF,GAAtB,EAA2BD,IAAI,CAACb,CAAD,CAA/B,EAAoCA,CAAC,IAAIc,GAAzC,EAA8C;MAC5C,IAAI,KAAKZ,OAAL,CAAaS,KAAK,CAACX,CAAD,CAAL,CAASiB,MAAT,CAAb,CAAJ,EAAoC;QAClC,IAAI,KAAKX,eAAL,CAAqBK,KAAK,CAACX,CAAD,CAAL,CAASiB,MAAT,CAArB,EAAuCd,KAAvC,CAAJ,EAAmD;UACjDY,MAAM,CAACG,IAAP,CAAY,CAAClB,CAAD,EAAIiB,MAAJ,CAAZ;QACD;;QACD;MACD;;MACDF,MAAM,CAACG,IAAP,CAAY,CAAClB,CAAD,EAAIiB,MAAJ,CAAZ;IACD;;IACD,OAAOF,MAAP;EACD;;EACDI,oBAAoB,CAACR,KAAD,EAAQC,QAAR,EAAkBT,KAAlB,EAAyBU,IAAzB,EAA+BC,GAA/B,EAAoC;IACtD,MAAMC,MAAM,GAAG,EAAf;IACA,MAAM,CAACC,MAAD,EAASC,MAAT,IAAmBL,QAAzB;;IACA,KAAK,IAAIX,CAAC,GAAGgB,MAAM,GAAGH,GAAtB,EAA2BD,IAAI,CAACZ,CAAD,CAA/B,EAAoCA,CAAC,IAAIa,GAAzC,EAA8C;MAC5C,IAAI,KAAKZ,OAAL,CAAaS,KAAK,CAACK,MAAD,CAAL,CAAcf,CAAd,CAAb,CAAJ,EAAoC;QAClC,IAAI,KAAKK,eAAL,CAAqBK,KAAK,CAACK,MAAD,CAAL,CAAcf,CAAd,CAArB,EAAuCE,KAAvC,CAAJ,EAAmD;UACjDY,MAAM,CAACG,IAAP,CAAY,CAACF,MAAD,EAASf,CAAT,CAAZ;QACD;;QACD;MACD;;MACDc,MAAM,CAACG,IAAP,CAAY,CAACF,MAAD,EAASf,CAAT,CAAZ;IACD;;IACD,OAAOc,MAAP;EACD;;EACDK,kBAAkB,CAACT,KAAD,EAAQC,QAAR,EAAkBT,KAAlB,EAAyBkB,IAAzB,EAA+BC,IAA/B,EAAqC;IACrD,MAAMP,MAAM,GAAG,EAAf;IACA,MAAM,CAACC,MAAD,EAASC,MAAT,IAAmBL,QAAzB;IACA,IAAIZ,CAAC,GAAGgB,MAAM,GAAGK,IAAjB;IACA,IAAIpB,CAAC,GAAGgB,MAAM,GAAGK,IAAjB;;IACA,OAAO,KAAKvB,OAAL,CAAaC,CAAb,EAAgBC,CAAhB,CAAP,EAA2B;MACzB,IAAI,KAAKC,OAAL,CAAaS,KAAK,CAACX,CAAD,CAAL,CAASC,CAAT,CAAb,CAAJ,EAA+B;QAC7B,IAAI,KAAKK,eAAL,CAAqBK,KAAK,CAACX,CAAD,CAAL,CAASC,CAAT,CAArB,EAAkCE,KAAlC,CAAJ,EAA8C;UAC5CY,MAAM,CAACG,IAAP,CAAY,CAAClB,CAAD,EAAIC,CAAJ,CAAZ;QACD;;QACD;MACD;;MACDc,MAAM,CAACG,IAAP,CAAY,CAAClB,CAAD,EAAIC,CAAJ,CAAZ;MACAD,CAAC,IAAIqB,IAAL;MACApB,CAAC,IAAIqB,IAAL;IACD;;IACD,OAAOP,MAAP;EACD;;AAhFS;;AAmFZ,MAAMQ,IAAN,SAAmB/B,KAAnB,CAAyB;EACvBC,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAW;IACpB,MAAMD,IAAN,EAAYC,GAAZ;EACD;;EACD6B,UAAU,CAACb,KAAD,EAAQc,OAAR,EAAiBC,IAAjB,EAAuB;IAC/B,IAAIX,MAAM,GAAG,EAAb;IACA,MAAM,CAACC,MAAD,EAASC,MAAT,IAAmBQ,OAAzB;IACA,IAAIE,KAAK,GAAG,EAAZ;IACA,IAAIC,UAAU,GAAG,EAAjB;IACA,IAAIC,SAAS,GAAG,EAAhB;;IACA,IAAIH,IAAI,CAAChC,IAAL,KAAcH,KAAlB,EAAyB;MACvBoC,KAAK,GAAG,CAACX,MAAM,GAAG,CAAV,EAAaC,MAAb,CAAR,CADuB,CAEvB;;MACA,IAAGD,MAAM,KAAK,CAAd,EAAiB;QACfD,MAAM,CAACG,IAAP,CAAY,CAACF,MAAM,GAAG,CAAV,EAAaC,MAAb,CAAZ;MACD;;MACDW,UAAU,GAAG,CAACZ,MAAM,GAAG,CAAV,EAAaC,MAAM,GAAG,CAAtB,CAAb;MACAY,SAAS,GAAG,CAACb,MAAM,GAAG,CAAV,EAAaC,MAAM,GAAG,CAAtB,CAAZ;IACD,CARD,MASK;MACHU,KAAK,GAAG,CAACX,MAAM,GAAG,CAAV,EAAaC,MAAb,CAAR,CADG,CAEH;;MACA,IAAGD,MAAM,KAAK,CAAd,EAAiB;QACfD,MAAM,CAACG,IAAP,CAAY,CAACF,MAAM,GAAG,CAAV,EAAaC,MAAb,CAAZ;MACD;;MACDW,UAAU,GAAG,CAACZ,MAAM,GAAG,CAAV,EAAaC,MAAM,GAAG,CAAtB,CAAb;MACAY,SAAS,GAAG,CAACb,MAAM,GAAG,CAAV,EAAaC,MAAM,GAAG,CAAtB,CAAZ;IACD,CAvB8B,CAwB/B;;;IACA,MAAM,CAACa,GAAD,EAAMC,GAAN,IAAaJ,KAAnB;IACA,IAAI,KAAKpB,WAAL,CAAiBI,KAAK,CAACmB,GAAD,CAAL,CAAWC,GAAX,CAAjB,CAAJ,EAAuChB,MAAM,CAACG,IAAP,CAAYS,KAAZ,EA1BR,CA2B/B;;IACA,MAAMK,QAAQ,GAAG,CAACJ,UAAD,EAAaC,SAAb,CAAjB;;IACA,KAAK,IAAII,IAAT,IAAiBD,QAAjB,EAA2B;MACzB,MAAM,CAACE,EAAD,EAAKC,EAAL,IAAWF,IAAjB;;MACA,IAAI,KAAK/B,OAAL,CAAaS,KAAK,CAACuB,EAAD,CAAL,CAAUC,EAAV,CAAb,KAA+B,KAAK7B,eAAL,CAAqBK,KAAK,CAACuB,EAAD,CAAL,CAAUC,EAAV,CAArB,EAAoCT,IAApC,CAAnC,EAA8E;QAC5EX,MAAM,CAACG,IAAP,CAAY,CAACgB,EAAD,EAAKC,EAAL,CAAZ;MACD;IACF;;IACD,OAAOpB,MAAP;EACD;;AAxCsB;;AA2CzB,MAAMqB,MAAN,SAAqB5C,KAArB,CAA2B;EACzBC,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAW;IACpB,MAAMD,IAAN,EAAYC,GAAZ;EACD;;EACD6B,UAAU,CAACb,KAAD,EAAQ0B,SAAR,EAAmBC,MAAnB,EAA2B;IACnC,MAAMvB,MAAM,GAAG,EAAf;IACA,KAAKK,kBAAL,CAAwBT,KAAxB,EAA+B0B,SAA/B,EAA0CC,MAA1C,EAAkD,CAAlD,EAAqD,CAArD,EAAwDC,OAAxD,CAAgEC,CAAC,IAAIzB,MAAM,CAACG,IAAP,CAAYsB,CAAZ,CAArE,EAFmC,CAEmD;;IACtF,KAAKpB,kBAAL,CAAwBT,KAAxB,EAA+B0B,SAA/B,EAA0CC,MAA1C,EAAkD,CAAlD,EAAqD,CAAC,CAAtD,EAAyDC,OAAzD,CAAiEC,CAAC,IAAIzB,MAAM,CAACG,IAAP,CAAYsB,CAAZ,CAAtE,EAHmC,CAGoD;;IACvF,KAAKpB,kBAAL,CAAwBT,KAAxB,EAA+B0B,SAA/B,EAA0CC,MAA1C,EAAkD,CAAC,CAAnD,EAAsD,CAAtD,EAAyDC,OAAzD,CAAiEC,CAAC,IAAIzB,MAAM,CAACG,IAAP,CAAYsB,CAAZ,CAAtE,EAJmC,CAIoD;;IACvF,KAAKpB,kBAAL,CAAwBT,KAAxB,EAA+B0B,SAA/B,EAA0CC,MAA1C,EAAkD,CAAC,CAAnD,EAAsD,CAAC,CAAvD,EAA0DC,OAA1D,CAAkEC,CAAC,IAAIzB,MAAM,CAACG,IAAP,CAAYsB,CAAZ,CAAvE,EALmC,CAKqD;;IACxF,OAAOzB,MAAP;EACD;;AAXwB;;AAc3B,MAAM0B,MAAN,SAAqBjD,KAArB,CAA2B;EACzBC,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAW;IACpB,MAAMD,IAAN,EAAYC,GAAZ;EACD;;EACD6B,UAAU,CAACb,KAAD,EAAQ+B,SAAR,EAAmBC,MAAnB,EAA2B;IACnC,IAAI5B,MAAM,GAAG,EAAb;IACA,MAAM,CAACC,MAAD,EAASC,MAAT,IAAmByB,SAAzB;IACA,MAAME,KAAK,GAAG,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,EAAQ,CAAC,CAAC,CAAF,EAAI,CAAJ,CAAR,EAAgB,CAAC,CAAD,EAAG,CAAC,CAAJ,CAAhB,EAAwB,CAAC,CAAC,CAAF,EAAI,CAAC,CAAL,CAAxB,EAAiC,CAAC,CAAD,EAAG,CAAH,CAAjC,EAAwC,CAAC,CAAC,CAAF,EAAI,CAAJ,CAAxC,EAAgD,CAAC,CAAD,EAAG,CAAC,CAAJ,CAAhD,EAAwD,CAAC,CAAC,CAAF,EAAI,CAAC,CAAL,CAAxD,CAAd;;IACA,KAAI,IAAIX,IAAR,IAAgBW,KAAhB,EAAsB;MACpB,MAAM,CAACvB,IAAD,EAAOC,IAAP,IAAeW,IAArB;MACA,IAAIjC,CAAC,GAAGgB,MAAM,GAAGK,IAAjB;MACA,IAAIpB,CAAC,GAAGgB,MAAM,GAAGK,IAAjB,CAHoB,CAIpB;;MACA,IAAG,KAAKvB,OAAL,CAAaC,CAAb,EAAgBC,CAAhB,KAAsB,CAAC,KAAKG,SAAL,CAAeO,KAAK,CAACX,CAAD,CAAL,CAASC,CAAT,CAAf,EAA4B0C,MAA5B,CAA1B,EAA8D;QAC5D,MAAME,KAAK,GAAG,CAAC7C,CAAD,EAAIC,CAAJ,CAAd;QACAc,MAAM,CAACG,IAAP,CAAY2B,KAAZ;MACD;IACF;;IACD,OAAO9B,MAAP;EACD;;AAnBwB;;AAsB3B,MAAM+B,IAAN,SAAmBtD,KAAnB,CAAyB;EACvBC,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAW;IACpB,MAAMD,IAAN,EAAYC,GAAZ;EACD;;EACD6B,UAAU,CAACb,KAAD,EAAQoC,OAAR,EAAiBC,IAAjB,EAAuB;IAC/B,IAAIjC,MAAM,GAAG,EAAb;IAEA,MAAMkC,OAAO,GAAG,KAAKvC,kBAAL,CAAwBC,KAAxB,EAA+BoC,OAA/B,EAAwCC,IAAxC,EAA8ChD,CAAC,IAAIA,CAAC,GAAG,CAAvD,EAA0D,CAA1D,CAAhB;IACA,MAAMkD,SAAS,GAAG,KAAKxC,kBAAL,CAAwBC,KAAxB,EAA+BoC,OAA/B,EAAwCC,IAAxC,EAA8ChD,CAAC,IAAIA,CAAC,IAAI,CAAxD,EAA2D,CAAC,CAA5D,CAAlB;IACA,MAAMmD,UAAU,GAAG,KAAKhC,oBAAL,CAA0BR,KAA1B,EAAiCoC,OAAjC,EAA0CC,IAA1C,EAAgD/C,CAAC,IAAIA,CAAC,GAAG,CAAzD,EAA4D,CAA5D,CAAnB;IACA,MAAMmD,SAAS,GAAG,KAAKjC,oBAAL,CAA0BR,KAA1B,EAAiCoC,OAAjC,EAA0CC,IAA1C,EAAgD/C,CAAC,IAAIA,CAAC,IAAI,CAA1D,EAA6D,CAAC,CAA9D,CAAlB;IACAgD,OAAO,CAACV,OAAR,CAAgBN,IAAI,IAAIlB,MAAM,CAACG,IAAP,CAAYe,IAAZ,CAAxB;IACAiB,SAAS,CAACX,OAAV,CAAkBN,IAAI,IAAIlB,MAAM,CAACG,IAAP,CAAYe,IAAZ,CAA1B;IACAmB,SAAS,CAACb,OAAV,CAAkBN,IAAI,IAAIlB,MAAM,CAACG,IAAP,CAAYe,IAAZ,CAA1B;IACAkB,UAAU,CAACZ,OAAX,CAAmBN,IAAI,IAAIlB,MAAM,CAACG,IAAP,CAAYe,IAAZ,CAA3B;IAEA,OAAOlB,MAAP;EACD;;AAjBsB;;AAoBzB,MAAMsC,KAAN,SAAoB7D,KAApB,CAA0B;EACxBC,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAW;IACpB,MAAMD,IAAN,EAAYC,GAAZ;EACD;;AAHuB;;AAM1B,MAAM2D,IAAN,SAAmB9D,KAAnB,CAAyB;EACvBC,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAW;IACpB,MAAMD,IAAN,EAAYC,GAAZ;EACD;;AAHsB;;AAOzB,SAAQH,KAAR,EAAe+B,IAAf,EAAqBa,MAArB,EAA6BK,MAA7B,EAAqCK,IAArC,EAA2CO,KAA3C,EAAkDC,IAAlD"},"metadata":{},"sourceType":"module"}