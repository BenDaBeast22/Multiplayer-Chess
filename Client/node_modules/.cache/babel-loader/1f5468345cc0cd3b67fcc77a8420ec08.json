{"ast":null,"code":"const BLACK = false;\nconst WHITE = true; // Abstract Class\n\nclass Piece {\n  constructor(type, img, pos) {\n    if (this.constructor === Piece) {\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  } // True if row and column are on the board (8x8)\n\n\n  onBoard(r, c) {\n    if (r > 7 || r < 0 || c > 7 || c < 0) {\n      return false;\n    }\n\n    return true;\n  } // True if piece on the square is the same color as the piece you are moving\n\n\n  sameColor(sqr, piece) {\n    if (sqr instanceof Piece && sqr.type === piece.type) {\n      return true;\n    }\n\n    return false;\n  }\n\n  opposingPieceOnSquare(sqr, piece) {\n    if (sqr instanceof Piece && sqr.type !== piece.type) {\n      console.log(\"Shake it on your feet\");\n      return true;\n    }\n\n    return false;\n  }\n\n  emptySquare(sqr) {\n    console.log(sqr);\n    return !(sqr instanceof Piece);\n  }\n\n}\n\nclass Pawn extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    let upOne = [];\n    let upOneRight = [];\n    let upOneLeft = [];\n\n    if (pawn.type === WHITE) {\n      upOne = [rStart + 1, cStart]; // Add up two legal move\n\n      if (rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n\n      upOneRight = [rStart + 1, cStart + 1];\n      upOneLeft = [rStart + 1, cStart - 1];\n    } else {\n      upOne = [rStart - 1, cStart]; // Add up two legal move\n\n      if (rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n\n      upOneRight = [rStart - 1, cStart + 1];\n      upOneLeft = [rStart - 1, cStart - 1];\n    } // Add up one legal move\n\n\n    const [uor, uoc] = upOne;\n    if (this.emptySquare(board[uor][uoc])) lMoves.push(upOne); // Add diagonal legal moves\n\n    const diagonal = [upOneRight, upOneLeft];\n\n    for (let move of diagonal) {\n      const [rd, rc] = move;\n\n      if (this.opposingPieceOnSquare(board[rd][rc], pawn)) {\n        lMoves.push([rd, rc]);\n      }\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Bishop extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nclass Knight extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [-2, 1], [2, -1], [-2, -1]];\n\n    for (let move of moves) {\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff; // If move sqr is on the board and does not have one of your pieces on it move is valid\n\n      if (this.onBoard(r, c) && !this.sameColor(board[r][c], knight)) {\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Rook extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, rookPos, rook) {\n    let lMoves = [];\n    const [rStart, cStart] = rookPos; // Rook up\n\n    for (let r = rStart + 1; r < 8; r++) {\n      if (board[r][cStart] instanceof Piece) {\n        if (board[r][cStart].type !== rook.type) {\n          lMoves.push([r, cStart]);\n        }\n\n        break;\n      }\n\n      lMoves.push([r, cStart]);\n    } // Rook down\n\n\n    for (let r = rStart - 1; r >= 0; r--) {\n      if (board[r][cStart] instanceof Piece) {\n        if (board[r][cStart].type !== rook.type) {\n          lMoves.push([r, cStart]);\n        }\n\n        break;\n      }\n\n      lMoves.push([r, cStart]);\n    } // Rook right\n\n\n    for (let c = cStart + 1; c < 8; c++) {\n      if (board[rStart][c] instanceof Piece) {\n        if (board[rStart][c].type !== rook.type) {\n          lMoves.push([rStart, c]);\n        }\n\n        break;\n      }\n\n      lMoves.push([rStart, c]);\n    } // Rook left\n\n\n    for (let c = cStart - 1; c >= 0; c--) {\n      if (board[rStart][c] instanceof Piece) {\n        if (board[rStart][c].type !== rook.type) {\n          lMoves.push([rStart, c]);\n        }\n\n        break;\n      }\n\n      lMoves.push([rStart, c]);\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Queen extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nclass King extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nexport { Piece, Pawn, Bishop, Knight, Rook, Queen, King };","map":{"version":3,"names":["BLACK","WHITE","Piece","constructor","type","img","pos","Error","imgName","onBoard","r","c","sameColor","sqr","piece","opposingPieceOnSquare","console","log","emptySquare","Pawn","legalMoves","board","pawnPos","pawn","lMoves","rStart","cStart","upOne","upOneRight","upOneLeft","push","uor","uoc","diagonal","move","rd","rc","Bishop","Knight","knightPos","knight","moves","rOff","cOff","lMove","Rook","rookPos","rook","Queen","King"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/Pieces.js"],"sourcesContent":["const BLACK = false;\nconst WHITE = true;\n\n// Abstract Class\nclass Piece {\n  constructor(type, img, pos){\n    if(this.constructor === Piece){\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  }\n  // True if row and column are on the board (8x8)\n  onBoard(r, c){\n    if(r > 7 || r < 0 || c > 7 || c < 0){\n      return false;\n    }\n    return true;\n  }\n  // True if piece on the square is the same color as the piece you are moving\n  sameColor(sqr, piece){\n    if(sqr instanceof Piece && sqr.type === piece.type){\n      return true;\n    }\n    return false;\n  }\n  opposingPieceOnSquare(sqr, piece) {\n    if (sqr instanceof Piece && sqr.type !== piece.type) {\n      console.log(\"Shake it on your feet\")\n      return true;\n    }\n    return false;\n  }\n  emptySquare(sqr) {\n    console.log(sqr);\n    return !(sqr instanceof Piece);\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    let upOne = [];\n    let upOneRight = [];\n    let upOneLeft = [];\n    if (pawn.type === WHITE) {\n      upOne = [rStart + 1, cStart];\n      // Add up two legal move\n      if(rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n      upOneRight = [rStart + 1, cStart + 1];\n      upOneLeft = [rStart + 1, cStart - 1];\n    } \n    else {\n      upOne = [rStart - 1, cStart];\n      // Add up two legal move\n      if(rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n      upOneRight = [rStart - 1, cStart + 1];\n      upOneLeft = [rStart - 1, cStart - 1];\n    }\n    // Add up one legal move\n    const [uor, uoc] = upOne;\n    if (this.emptySquare(board[uor][uoc])) lMoves.push(upOne);\n    // Add diagonal legal moves\n    const diagonal = [upOneRight, upOneLeft];\n    for (let move of diagonal) {\n      const [rd, rc] = move;\n      if (this.opposingPieceOnSquare(board[rd][rc], pawn)) {\n        lMoves.push([rd, rc])\n      }\n    }\n    return lMoves;\n  }\n}\n\nclass Bishop extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\nclass Knight extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1,2], [-1,2], [1,-2], [-1,-2], [2,1], [-2,1], [2,-1], [-2,-1]];\n    for(let move of moves){\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff;\n      // If move sqr is on the board and does not have one of your pieces on it move is valid\n      if(this.onBoard(r, c) && !this.sameColor(board[r][c], knight)){\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }  \n    }\n    return lMoves;  \n  }\n}\n\nclass Rook extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, rookPos, rook) {\n    let lMoves = [];\n    const [rStart, cStart] = rookPos;\n\n    // Rook up\n    for(let r = rStart + 1; r < 8; r++) {\n      if (board[r][cStart] instanceof Piece) {\n        if (board[r][cStart].type !== rook.type) {\n          lMoves.push([r, cStart]);\n        }\n        break;\n      }\n      lMoves.push([r, cStart]);\n    }\n    // Rook down\n    for(let r = rStart - 1; r >= 0; r--) {\n      if (board[r][cStart] instanceof Piece) {\n        if (board[r][cStart].type !== rook.type) {\n          lMoves.push([r, cStart]);\n        }\n        break;\n      }\n      lMoves.push([r, cStart]);\n    }\n    // Rook right\n    for(let c = cStart + 1; c < 8; c++) {\n      if (board[rStart][c] instanceof Piece) {\n        if (board[rStart][c].type !== rook.type) {\n          lMoves.push([rStart, c]);\n        }\n        break;\n      }\n      lMoves.push([rStart, c]);\n    }\n    // Rook left\n    for(let c = cStart - 1; c >= 0; c--) {\n      if (board[rStart][c] instanceof Piece) {\n        if (board[rStart][c].type !== rook.type) {\n          lMoves.push([rStart, c]);\n        }\n        break;\n      }\n      lMoves.push([rStart, c]);\n    }\n    return lMoves;\n  }\n}\n\nclass Queen extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\nclass King extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\n\nexport {Piece, Pawn, Bishop, Knight, Rook, Queen, King};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}