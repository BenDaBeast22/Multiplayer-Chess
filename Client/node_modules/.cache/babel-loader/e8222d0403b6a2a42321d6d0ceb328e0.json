{"ast":null,"code":"import { arrayEquals } from './Helpers';\nconst BLACK = false;\nconst WHITE = true; // Abstract Class\n\nclass Piece {\n  constructor(type, img, pos) {\n    if (this.constructor === Piece) {\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  } // True if row and column are on the board (8x8)\n\n\n  onBoard(r, c) {\n    if (r > 7 || r < 0 || c > 7 || c < 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isPiece(piece) {\n    if (piece instanceof Piece) return true;\n    return false;\n  } // True if piece on the square is the same color as the piece you are moving\n\n\n  sameColor(sqr, piece) {\n    if (sqr instanceof Piece && sqr.type === piece.type) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isOppositePiece(sqr, piece) {\n    if (sqr.type !== piece.type) return true;\n    return false;\n  }\n\n  emptySquare(sqr) {\n    return !(sqr instanceof Piece);\n  }\n\n  straightLegalMoves(board, startPos, piece, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n\n    for (let r = rStart + off; this.onBoard(r, cStart); r += off) {\n      if (this.isPiece(board[r][cStart])) {\n        if (this.isOppositePiece(board[r][cStart], piece)) {\n          lMoves.push([r, cStart]);\n        }\n\n        break;\n      }\n\n      lMoves.push([r, cStart]);\n    }\n\n    return lMoves;\n  }\n\n  horizantalLegalMoves(board, startPos, piece, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n\n    for (let c = cStart + off; this.onBoard(rStart, c); c += off) {\n      if (this.isPiece(board[rStart][c])) {\n        if (this.isOppositePiece(board[rStart][c], piece)) {\n          lMoves.push([rStart, c]);\n        }\n\n        break;\n      }\n\n      lMoves.push([rStart, c]);\n    }\n\n    return lMoves;\n  }\n\n  diagonalLegalMoves(board, startPos, piece, rOff, cOff) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    let r = rStart + rOff;\n    let c = cStart + cOff;\n\n    while (this.onBoard(r, c)) {\n      if (this.isPiece(board[r][c])) {\n        if (this.isOppositePiece(board[r][c], piece)) {\n          lMoves.push([r, c]);\n        }\n\n        break;\n      }\n\n      lMoves.push([r, c]);\n      r += rOff;\n      c += cOff;\n    }\n\n    return lMoves;\n  }\n\n  arrayLegalMoves(board, startPos, piece, moves) {\n    let lMoves = [];\n    const [rStart, cStart] = startPos;\n\n    for (let move of moves) {\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff; // If move sqr is on the board and does not have one of your pieces on it move is valid\n\n      if (this.onBoard(r, c) && !this.sameColor(board[r][c], piece)) {\n        lMoves.push([r, c]);\n      }\n    }\n\n    return lMoves;\n  }\n\n  opposingSquaresCovered(board, turn) {\n    let squaresCovered = []; // console.log(board);\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n\n          if (turn !== piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n\n    return squaresCovered;\n  }\n\n  kingUnderAttack(board, startPos, endPos, piece, kingPos) {\n    if (piece instanceof King) kingPos = endPos;\n    const [a, b] = startPos;\n    const [x, y] = endPos; // const newBoard = board.map(o => o);\n\n    const endPiece = board[x][y];\n    board[a][b] = \"-\";\n    board[x][y] = piece; // Check move doesn't allow king to be attacked\n\n    const sqrsCovered = this.opposingSquaresCovered(board, piece.type);\n\n    for (let move of sqrsCovered) {\n      if (arrayEquals(move, kingPos)) {\n        board[x][y] = endPiece;\n        board[a][b] = piece;\n        return true;\n      }\n    }\n\n    board[x][y] = endPiece;\n    board[a][b] = piece;\n    return false;\n  }\n\n  outOfCheck(board, startPos, endPos, piece, kingPos) {\n    console.log(\"out of check\");\n    if (piece instanceof King) kingPos = endPos;\n    const [a, b] = startPos;\n    const [x, y] = endPos; // const newBoard = board.map(o => o);\n\n    const endPiece = board[x][y];\n    board[a][b] = \"-\";\n    board[x][y] = piece; // Check move doesn't allow king to be attacked\n\n    const sqrsCovered = this.opposingSquaresCovered(board, piece.type);\n\n    for (let move of sqrsCovered) {\n      if (arrayEquals(move, kingPos)) {\n        board[x][y] = endPiece;\n        board[a][b] = piece;\n        return true;\n      }\n    }\n\n    board[x][y] = endPiece;\n    board[a][b] = piece;\n    return false;\n  }\n\n}\n\nclass Pawn extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    let upOne = [];\n    let upOneRight = [];\n    let upOneLeft = [];\n\n    if (pawn.type === WHITE) {\n      upOne = [rStart + 1, cStart]; // Add up two legal move\n\n      if (rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n\n      upOneRight = [rStart + 1, cStart + 1];\n      upOneLeft = [rStart + 1, cStart - 1];\n    } else {\n      upOne = [rStart - 1, cStart]; // Add up two legal move\n\n      if (rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n\n      upOneRight = [rStart - 1, cStart + 1];\n      upOneLeft = [rStart - 1, cStart - 1];\n    } // Add up one legal move\n\n\n    const [uor, uoc] = upOne;\n    if (this.emptySquare(board[uor][uoc])) lMoves.push(upOne); // Add diagonal legal moves\n\n    const diagonal = [upOneRight, upOneLeft];\n\n    for (let move of diagonal) {\n      const [rd, rc] = move;\n\n      if (this.isPiece(board[rd][rc]) && this.isOppositePiece(board[rd][rc], pawn)) {\n        lMoves.push([rd, rc]);\n      }\n    }\n\n    return lMoves;\n  }\n\n  allowedMoves(board, pawnPos, pawn, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, pawnPos, pawn);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, pawnPos, m, pawn, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, pawnPos, m, pawn));\n    return aMoves;\n  }\n\n}\n\nclass Bishop extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, bishopPos, bishop) {\n    let lMoves = [];\n    this.diagonalLegalMoves(board, bishopPos, bishop, 1, 1).forEach(m => lMoves.push(m)); // Up right\n\n    this.diagonalLegalMoves(board, bishopPos, bishop, 1, -1).forEach(m => lMoves.push(m)); // Up left\n\n    this.diagonalLegalMoves(board, bishopPos, bishop, -1, 1).forEach(m => lMoves.push(m)); // Down right\n\n    this.diagonalLegalMoves(board, bishopPos, bishop, -1, -1).forEach(m => lMoves.push(m)); // Down left\n\n    return lMoves;\n  }\n\n  allowedMoves(board, bishopPos, bishop, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, bishopPos, bishop);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, bishopPos, m, bishop, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, bishopPos, m, bishop));\n    return aMoves;\n  }\n\n}\n\nclass Rook extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, rookPos, rook) {\n    let lMoves = [];\n    this.straightLegalMoves(board, rookPos, rook, 1).forEach(m => lMoves.push(m)); // Up\n\n    this.straightLegalMoves(board, rookPos, rook, -1).forEach(m => lMoves.push(m)); // Down\n\n    this.horizantalLegalMoves(board, rookPos, rook, 1).forEach(m => lMoves.push(m)); // Right\n\n    this.horizantalLegalMoves(board, rookPos, rook, -1).forEach(m => lMoves.push(m)); // Left\n\n    return lMoves;\n  }\n\n  allowedMoves(board, rookPos, rook, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, rookPos, rook);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, rookPos, m, rook, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, rookPos, m, rook));\n    return aMoves;\n  }\n\n}\n\nclass Queen extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, queenPos, queen) {\n    let lMoves = [];\n    this.straightLegalMoves(board, queenPos, queen, 1).forEach(m => lMoves.push(m)); // Up\n\n    this.straightLegalMoves(board, queenPos, queen, -1).forEach(m => lMoves.push(m)); // Down\n\n    this.horizantalLegalMoves(board, queenPos, queen, 1).forEach(m => lMoves.push(m)); // Right\n\n    this.horizantalLegalMoves(board, queenPos, queen, -1).forEach(m => lMoves.push(m)); // Left\n\n    this.diagonalLegalMoves(board, queenPos, queen, 1, 1).forEach(m => lMoves.push(m)); // Up right\n\n    this.diagonalLegalMoves(board, queenPos, queen, 1, -1).forEach(m => lMoves.push(m)); // Up left\n\n    this.diagonalLegalMoves(board, queenPos, queen, -1, 1).forEach(m => lMoves.push(m)); // Down right\n\n    this.diagonalLegalMoves(board, queenPos, queen, -1, -1).forEach(m => lMoves.push(m)); // Down left\n\n    return lMoves;\n  }\n\n  allowedMoves(board, queenPos, queen, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, queenPos, queen);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, queenPos, m, queen, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, queenPos, m, queen));\n    return aMoves;\n  }\n\n}\n\nclass Knight extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [-2, 1], [2, -1], [-2, -1]];\n\n    for (let move of moves) {\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff; // If move sqr is on the board and does not have one of your pieces on it move is valid\n\n      if (this.onBoard(r, c) && !this.sameColor(board[r][c], knight)) {\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }\n    }\n\n    return lMoves;\n  }\n\n  allowedMoves(board, knightPos, knight, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, knightPos, knight);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, knightPos, m, knight, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, knightPos, m, knight));\n    return aMoves;\n  }\n\n}\n\nclass King extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, kingPos, king) {\n    let lMoves = [];\n    const moves = [[1, -1], [1, 0], [1, 1], [0, -1], [0, 1], [-1, -1], [-1, 0], [-1, 1]];\n    this.arrayLegalMoves(board, kingPos, king, moves).forEach(m => lMoves.push(m));\n    return lMoves;\n  }\n\n  allowedMoves(board, piecePos, king, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, piecePos, king);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, piecePos, m, king));\n    console.log(\"InCheck\");\n    console.log(inCheck);\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, piecePos, m, king));\n    return aMoves;\n  }\n\n}\n\nexport { Piece, Pawn, Bishop, Knight, Rook, Queen, King };","map":{"version":3,"names":["arrayEquals","BLACK","WHITE","Piece","constructor","type","img","pos","Error","imgName","onBoard","r","c","isPiece","piece","sameColor","sqr","isOppositePiece","emptySquare","straightLegalMoves","board","startPos","off","lMoves","rStart","cStart","push","horizantalLegalMoves","diagonalLegalMoves","rOff","cOff","arrayLegalMoves","moves","move","opposingSquaresCovered","turn","squaresCovered","legalMoves","forEach","m","kingUnderAttack","endPos","kingPos","King","a","b","x","y","endPiece","sqrsCovered","outOfCheck","console","log","Pawn","pawnPos","pawn","upOne","upOneRight","upOneLeft","uor","uoc","diagonal","rd","rc","allowedMoves","inCheck","aMoves","filter","Bishop","bishopPos","bishop","Rook","rookPos","rook","Queen","queenPos","queen","Knight","knightPos","knight","lMove","king","piecePos"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/Pieces.js"],"sourcesContent":["import {arrayEquals} from './Helpers';\nconst BLACK = false;\nconst WHITE = true;\n\n// Abstract Class\nclass Piece {\n  constructor(type, img, pos){\n    if(this.constructor === Piece){\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  }\n  // True if row and column are on the board (8x8)\n  onBoard(r, c){\n    if(r > 7 || r < 0 || c > 7 || c < 0){\n      return false;\n    }\n    return true;\n  }\n  isPiece(piece) {\n    if (piece instanceof Piece) return true;\n    return false;\n  }\n  // True if piece on the square is the same color as the piece you are moving\n  sameColor(sqr, piece){\n    if(sqr instanceof Piece && sqr.type === piece.type){\n      return true;\n    }\n    return false;\n  }\n  isOppositePiece(sqr, piece) {\n    if (sqr.type !== piece.type) return true;\n    return false;\n  }\n  emptySquare(sqr) {\n    return !(sqr instanceof Piece);\n  }\n  straightLegalMoves(board, startPos, piece, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    for (let r = rStart + off; this.onBoard(r, cStart); r += off) {\n      if (this.isPiece(board[r][cStart])) {\n        if (this.isOppositePiece(board[r][cStart], piece)) {\n          lMoves.push([r, cStart]);\n        }\n        break;\n      }\n      lMoves.push([r, cStart]);\n    }\n    return lMoves;\n  }\n  horizantalLegalMoves(board, startPos, piece, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    for (let c = cStart + off; this.onBoard(rStart, c); c += off) {\n      if (this.isPiece(board[rStart][c])) {\n        if (this.isOppositePiece(board[rStart][c], piece)) {\n          lMoves.push([rStart, c]);\n        }\n        break;\n      }\n      lMoves.push([rStart, c]);\n    }\n    return lMoves;\n  }\n  diagonalLegalMoves(board, startPos, piece, rOff, cOff) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    let r = rStart + rOff;\n    let c = cStart + cOff;\n    while (this.onBoard(r, c)) {\n      if (this.isPiece(board[r][c])) {\n        if (this.isOppositePiece(board[r][c], piece)) {\n          lMoves.push([r, c]);\n        }\n        break;\n      }\n      lMoves.push([r, c]);\n      r += rOff;\n      c += cOff;\n    }\n    return lMoves;\n  }\n  arrayLegalMoves(board, startPos, piece, moves) {\n    let lMoves = [];\n    const [rStart, cStart] = startPos;\n    for(let move of moves){\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff;\n      // If move sqr is on the board and does not have one of your pieces on it move is valid\n      if(this.onBoard(r, c) && !this.sameColor(board[r][c], piece)){\n        lMoves.push([r, c]);\n      }  \n    }\n    return lMoves;  \n  }\n  opposingSquaresCovered(board, turn) {\n    let squaresCovered = [];\n    // console.log(board);\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n          if (turn !== piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n    return squaresCovered;\n  }\n  kingUnderAttack(board, startPos, endPos, piece, kingPos) {\n    if (piece instanceof King) kingPos = endPos;\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    // const newBoard = board.map(o => o);\n    const endPiece = board[x][y];\n    board[a][b] = \"-\";\n    board[x][y] = piece;\n    // Check move doesn't allow king to be attacked\n    const sqrsCovered = this.opposingSquaresCovered(board, piece.type);\n    for (let move of sqrsCovered) {\n      if (arrayEquals(move, kingPos)) {\n        board[x][y] = endPiece;\n        board[a][b] = piece;\n        return true;\n      }\n    }\n    board[x][y] = endPiece;\n    board[a][b] = piece;\n    return false;\n  } \n  outOfCheck(board, startPos, endPos, piece, kingPos) {\n    console.log(\"out of check\");\n    if (piece instanceof King) kingPos = endPos;\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    // const newBoard = board.map(o => o);\n    const endPiece = board[x][y];\n    board[a][b] = \"-\";\n    board[x][y] = piece;\n    // Check move doesn't allow king to be attacked\n    const sqrsCovered = this.opposingSquaresCovered(board, piece.type);\n    for (let move of sqrsCovered) {\n      if (arrayEquals(move, kingPos)) {\n        board[x][y] = endPiece;\n        board[a][b] = piece;\n        return true;\n      }\n    }\n    board[x][y] = endPiece;\n    board[a][b] = piece;\n    return false;\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    let upOne = [];\n    let upOneRight = [];\n    let upOneLeft = [];\n    if (pawn.type === WHITE) {\n      upOne = [rStart + 1, cStart];\n      // Add up two legal move\n      if(rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n      upOneRight = [rStart + 1, cStart + 1];\n      upOneLeft = [rStart + 1, cStart - 1];\n    } \n    else {\n      upOne = [rStart - 1, cStart];\n      // Add up two legal move\n      if(rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n      upOneRight = [rStart - 1, cStart + 1];\n      upOneLeft = [rStart - 1, cStart - 1];\n    }\n    // Add up one legal move\n    const [uor, uoc] = upOne;\n    if (this.emptySquare(board[uor][uoc])) lMoves.push(upOne);\n    // Add diagonal legal moves\n    const diagonal = [upOneRight, upOneLeft];\n    for (let move of diagonal) {\n      const [rd, rc] = move;\n      if (this.isPiece(board[rd][rc]) && this.isOppositePiece(board[rd][rc], pawn)) {\n        lMoves.push([rd, rc])\n      }\n    }\n    return lMoves;\n  }\n  allowedMoves(board, pawnPos, pawn, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, pawnPos, pawn);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, pawnPos, m, pawn, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, pawnPos, m, pawn));\n    return aMoves;\n  }\n}\n\nclass Bishop extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, bishopPos, bishop) {\n    let lMoves = [];\n    this.diagonalLegalMoves(board, bishopPos, bishop, 1, 1).forEach(m => lMoves.push(m)); // Up right\n    this.diagonalLegalMoves(board, bishopPos, bishop, 1, -1).forEach(m => lMoves.push(m)); // Up left\n    this.diagonalLegalMoves(board, bishopPos, bishop, -1, 1).forEach(m => lMoves.push(m)); // Down right\n    this.diagonalLegalMoves(board, bishopPos, bishop, -1, -1).forEach(m => lMoves.push(m)); // Down left\n    return lMoves;\n  }\n  allowedMoves(board, bishopPos, bishop, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, bishopPos, bishop);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, bishopPos, m, bishop, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, bishopPos, m, bishop));\n    return aMoves;\n  }\n}\n\nclass Rook extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, rookPos, rook) {\n    let lMoves = [];\n    this.straightLegalMoves(board, rookPos, rook, 1).forEach(m => lMoves.push(m)); // Up\n    this.straightLegalMoves(board, rookPos, rook, -1).forEach(m => lMoves.push(m)); // Down\n    this.horizantalLegalMoves(board, rookPos, rook, 1).forEach(m => lMoves.push(m)); // Right\n    this.horizantalLegalMoves(board, rookPos, rook, -1).forEach(m => lMoves.push(m)); // Left\n    return lMoves;\n  }\n  allowedMoves(board, rookPos, rook, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, rookPos, rook);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, rookPos, m, rook, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, rookPos, m, rook));\n    return aMoves;\n  }\n}\n\nclass Queen extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, queenPos, queen) {\n    let lMoves = [];\n    this.straightLegalMoves(board, queenPos, queen, 1).forEach(m => lMoves.push(m)); // Up\n    this.straightLegalMoves(board, queenPos, queen, -1).forEach(m => lMoves.push(m)); // Down\n    this.horizantalLegalMoves(board, queenPos, queen, 1).forEach(m => lMoves.push(m)); // Right\n    this.horizantalLegalMoves(board, queenPos, queen, -1).forEach(m => lMoves.push(m)); // Left\n    this.diagonalLegalMoves(board, queenPos, queen, 1, 1).forEach(m => lMoves.push(m)); // Up right\n    this.diagonalLegalMoves(board, queenPos, queen, 1, -1).forEach(m => lMoves.push(m)); // Up left\n    this.diagonalLegalMoves(board, queenPos, queen, -1, 1).forEach(m => lMoves.push(m)); // Down right\n    this.diagonalLegalMoves(board, queenPos, queen, -1, -1).forEach(m => lMoves.push(m)); // Down left\n    return lMoves;\n  }\n  allowedMoves(board, queenPos, queen, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, queenPos, queen);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, queenPos, m, queen, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, queenPos, m, queen));\n    return aMoves;\n  }\n}\n\nclass Knight extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1,2], [-1,2], [1,-2], [-1,-2], [2,1], [-2,1], [2,-1], [-2,-1]];\n    for(let move of moves){\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff;\n      // If move sqr is on the board and does not have one of your pieces on it move is valid\n      if(this.onBoard(r, c) && !this.sameColor(board[r][c], knight)){\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }  \n    }\n    return lMoves;  \n  }\n  allowedMoves(board, knightPos, knight, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, knightPos, knight);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, knightPos, m, knight, kingPos));\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, knightPos, m, knight));\n    return aMoves;\n  }\n}\n\nclass King extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, kingPos, king) {\n    let lMoves = [];\n    const moves = [\n      [1, -1], [1, 0], [1, 1],\n      [0, -1],         [0, 1],\n      [-1,-1], [-1,0], [-1,1]\n    ];\n    this.arrayLegalMoves(board, kingPos, king, moves).forEach(m => lMoves.push(m));\n    return lMoves;\n  }\n  allowedMoves(board, piecePos, king, kingPos, inCheck) {\n    const lMoves = this.legalMoves(board, piecePos, king);\n    const aMoves = lMoves.filter(m => !this.kingUnderAttack(board, piecePos, m, king));\n    console.log(\"InCheck\")\n    console.log(inCheck);\n    if (inCheck) aMoves.filter(m => this.outOfCheck(board, piecePos, m, king));\n    return aMoves;\n  }\n}\n\n\nexport {Piece, Pawn, Bishop, Knight, Rook, Queen, King};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}