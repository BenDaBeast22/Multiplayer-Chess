{"ast":null,"code":"var _jsxFileName = \"/Users/benjamincritoph/Programming/React/chess/src/Board.js\";\nimport './Board.css';\nimport React from 'react';\nimport Square from './Square';\nimport { Piece, Pawn, Bishop, Knight, Rook, Queen, King } from './Pieces';\nimport { arrayEquals } from './Helpers';\nimport ChessGame from './ChessGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BLACK = false;\nconst WHITE = true;\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: this.setupBoard(),\n      selectedPiece: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[false, false, false], [false, false, false]],\n      lastEnPassant: false,\n      draw: false\n    };\n    this.resetBoard = this.resetBoard.bind(this);\n  }\n\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n\n    if (board[or][oc].type === board[r][c].type && !(or === r && oc === c)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  selectPiece(pos) {\n    const [r, c] = pos;\n\n    if (this.state.selectedPiece && !this.changeSelection(this.state.board, this.state.selectedPiece, pos)) {\n      if (arrayEquals(pos, this.state.selectedPiece)) {\n        this.setState({\n          selectedPiece: false,\n          legalMoves: []\n        });\n        return;\n      }\n\n      const [or, oc] = this.state.selectedPiece;\n      const pieceFrom = this.state.board[or][oc];\n      const [newBoard, kingPos, inCheck, checkmate, castleCheck, lastEnPassant, draw] = Game.move(this.state.board, this.state.selectedPiece, pos, pieceFrom, this.state.kingPos, this.state.inCheck, this.state.castleCheck, this.state.lastEnPassant, this.state.draw);\n\n      if (checkmate) {\n        this.setState({\n          winner: pieceFrom.type,\n          checkmate: true,\n          inCheck: true,\n          legalMoves: [],\n          selectedPiece: false,\n          turn: !this.state.turn\n        });\n        return;\n      } else if (draw) {\n        this.setState({\n          draw: true,\n          legalMoves: [],\n          selectedPiece: false,\n          turn: !this.state.turn\n        });\n        return;\n      }\n\n      if (newBoard) {\n        this.setState({\n          board: newBoard,\n          selectedPiece: false,\n          turn: !this.state.turn,\n          legalMoves: [],\n          kingPos: kingPos,\n          inCheck: inCheck,\n          checkmate: checkmate,\n          castleCheck: castleCheck,\n          lastEnPassant: lastEnPassant,\n          draw: draw\n        });\n      }\n\n      return;\n    }\n\n    const selectedPiece = this.state.board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== this.state.turn) return;\n    const kIdx = selectedPiece.type ? 0 : 1;\n    const cIdx = selectedPiece.type ? 0 : 1;\n    const lMoves = selectedPiece.allowedMoves(this.state.board, pos, selectedPiece, this.state.kingPos[kIdx], this.state.castleCheck[cIdx], this.state.lastEnPassant);\n    this.setState({\n      selectedPiece: pos,\n      legalMoves: lMoves\n    });\n  }\n\n  setupBoard() {\n    let board = [];\n    const {\n      nRows,\n      nCols\n    } = this.props; // Generate Empty Board\n\n    for (let r = nRows - 1; r >= 0; r--) {\n      let row = [];\n\n      for (let c = 0; c < nCols; c++) {\n        row.push(\"-\");\n      }\n\n      board.push(row);\n    } // Display White Pieces\n\n\n    board[0][0] = new Rook(WHITE, \"w_r\", [0, 0]);\n    board[0][1] = new Knight(WHITE, \"w_kn\", [0, 1]);\n    board[0][2] = new Bishop(WHITE, \"w_b\", [0, 2]);\n    board[0][3] = new Queen(WHITE, \"w_q\", [0, 3]);\n    board[0][4] = new King(WHITE, \"w_k\", [0, 4]);\n    board[0][5] = new Bishop(WHITE, \"w_b\", [0, 5]);\n    board[0][6] = new Knight(WHITE, \"w_kn\", [0, 6]);\n    board[0][7] = new Rook(WHITE, \"w_r\", [0, 7]); // Display Black Pieces\n    // board[7][0] = new Rook(BLACK, \"b_r\", [7, 0]);\n    // board[7][1] = new Knight(BLACK, \"b_kn\", [7, 1]);\n    // board[7][2] = new Bishop(BLACK, \"b_b\", [7, 2]);\n    // board[7][3] = new Queen(BLACK, \"b_q\", [7, 3]);\n\n    board[7][4] = new King(BLACK, \"b_k\", [7, 4]); // board[7][5] = new Bishop(BLACK, \"b_b\", [7, 5]);\n    // board[7][6] = new Knight(BLACK, \"b_kn\", [7, 6]);\n    // board[7][7] = new Rook(BLACK, \"b_r\", [7, 7]);\n    // Display Pawns\n\n    for (let c = 0; c < 8; c++) {\n      board[1][c] = new Pawn(WHITE, \"w_p\", [1, c]); // board[6][c] = new Pawn(BLACK, \"b_p\", [6, c]);\n    }\n\n    return board;\n  }\n\n  resetBoard() {\n    this.setState({\n      board: this.setupBoard(),\n      selectedPiece: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false\n    });\n    Game = new ChessGame();\n  }\n\n  render() {\n    // Render Chess Board\n    let winMessage = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.winner ? \"White Wins!!!\" : \"Black Wins!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 22\n    }, this);\n\n    let board = [];\n    let cOdd = true;\n    let rOdd = true;\n\n    for (let i = this.props.nRows - 1; i >= 0; i--) {\n      let row = [];\n      cOdd = rOdd;\n\n      for (let j = 0; j < this.props.nCols; j++) {\n        const sqr = `${String.fromCharCode(97 + j)}${i}`;\n        const isDark = cOdd ? true : false;\n        const piece = this.state.board[i][j];\n        const pos = [i, j];\n        const isSelected = arrayEquals(pos, this.state.selectedPiece);\n        const isLegalMove = this.state.legalMoves.some(lm => arrayEquals(lm, pos) ? true : false);\n        const isCheckmate = this.state.checkmate;\n        const draw = this.state.draw && piece instanceof King && this.state.turn === piece.type;\n        const inCheck = piece instanceof King && this.state.inCheck && this.state.turn === piece.type;\n        row.push( /*#__PURE__*/_jsxDEV(Square, {\n          isDark: isDark,\n          piece: piece,\n          selectPiece: () => this.selectPiece([i, j]),\n          isSelected: isSelected,\n          isLegal: isLegalMove,\n          inCheck: inCheck,\n          isCheckmate: isCheckmate,\n          draw: draw\n        }, sqr, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 18\n        }, this));\n        cOdd = !cOdd;\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 18\n      }, this));\n      rOdd = !rOdd;\n    } // Render Chess Pieces\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Table\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: board\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetBoard,\n        className: \"Reset\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  nRows: 8,\n  nCols: 8\n};\nexport default Board;","map":{"version":3,"names":["React","Square","Piece","Pawn","Bishop","Knight","Rook","Queen","King","arrayEquals","ChessGame","BLACK","WHITE","Game","Board","Component","constructor","props","state","board","setupBoard","selectedPiece","turn","legalMoves","kingPos","inCheck","checkmate","winner","castleCheck","lastEnPassant","draw","resetBoard","bind","changeSelection","newPos","r","c","or","oc","type","selectPiece","pos","setState","pieceFrom","newBoard","move","kIdx","cIdx","lMoves","allowedMoves","nRows","nCols","row","push","render","winMessage","cOdd","rOdd","i","j","sqr","String","fromCharCode","isDark","piece","isSelected","isLegalMove","some","lm","isCheckmate","defaultProps"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/Board.js"],"sourcesContent":["import './Board.css'\nimport React from 'react'\nimport Square from './Square';\nimport {Piece, Pawn, Bishop, Knight, Rook, Queen, King} from './Pieces';\nimport { arrayEquals } from './Helpers';\nimport ChessGame from './ChessGame';\n\nconst BLACK = false\nconst WHITE = true\n\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  static defaultProps = {\n    nRows: 8,\n    nCols: 8,\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: this.setupBoard(),\n      selectedPiece: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck:  [[false, false, false], [false, false, false]],\n      lastEnPassant: false,\n      draw: false\n    }\n    this.resetBoard = this.resetBoard.bind(this);\n  }\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n    if ((board[or][oc].type === board[r][c].type) && !(or === r && oc === c)) {\n      return true;\n    }\n    return false;\n  }\n\n  selectPiece(pos) {\n    const [r, c] = pos;\n    if (this.state.selectedPiece && !this.changeSelection(this.state.board, this.state.selectedPiece, pos)) {\n      if (arrayEquals(pos, this.state.selectedPiece)){\n        this.setState({selectedPiece: false, legalMoves: []})\n        return;\n      } \n      const [or, oc] = this.state.selectedPiece;\n      const pieceFrom = this.state.board[or][oc];\n      const [newBoard, kingPos, inCheck, checkmate, castleCheck, lastEnPassant, draw] = Game.move(this.state.board, this.state.selectedPiece, pos, pieceFrom, this.state.kingPos, this.state.inCheck, this.state.castleCheck, this.state.lastEnPassant, this.state.draw);\n      if (checkmate) {\n        this.setState({winner: pieceFrom.type, checkmate: true, inCheck: true, legalMoves: [], selectedPiece: false, turn: !this.state.turn});\n        return;\n      }\n      else if (draw) {\n        this.setState({draw: true, legalMoves: [], selectedPiece: false, turn: !this.state.turn});\n        return;\n      }\n      if (newBoard){\n        this.setState({board: newBoard, selectedPiece: false, turn: !this.state.turn, legalMoves: [], kingPos: kingPos, inCheck: inCheck, checkmate: checkmate, castleCheck: castleCheck, lastEnPassant: lastEnPassant, draw: draw});\n      } \n      return;\n    }\n    const selectedPiece = this.state.board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== this.state.turn) return;\n    const kIdx = selectedPiece.type? 0 : 1;\n    const cIdx = selectedPiece.type? 0 : 1;\n    const lMoves = selectedPiece.allowedMoves(this.state.board, pos, selectedPiece, this.state.kingPos[kIdx], this.state.castleCheck[cIdx], this.state.lastEnPassant);\n    this.setState({selectedPiece: pos, legalMoves: lMoves});\n  }\n\n  setupBoard() {\n    let board = [];\n    const {nRows, nCols} = this.props;\n    // Generate Empty Board\n    for (let r = nRows - 1; r >= 0; r--) {\n      let row = []\n      for (let c = 0; c < nCols; c++) {\n        row.push(\"-\") \n      }\n      board.push(row)\n    }\n    // Display White Pieces\n    board[0][0] = new Rook(WHITE, \"w_r\", [0, 0]);\n    board[0][1] = new Knight(WHITE, \"w_kn\", [0, 1]);\n    board[0][2] = new Bishop(WHITE, \"w_b\", [0, 2]);\n    board[0][3] = new Queen(WHITE, \"w_q\", [0, 3]);\n    board[0][4] = new King(WHITE, \"w_k\", [0, 4]);\n    board[0][5] = new Bishop(WHITE, \"w_b\", [0, 5]);\n    board[0][6] = new Knight(WHITE, \"w_kn\", [0, 6]);\n    board[0][7] = new Rook(WHITE, \"w_r\", [0, 7]);\n    // Display Black Pieces\n    // board[7][0] = new Rook(BLACK, \"b_r\", [7, 0]);\n    // board[7][1] = new Knight(BLACK, \"b_kn\", [7, 1]);\n    // board[7][2] = new Bishop(BLACK, \"b_b\", [7, 2]);\n    // board[7][3] = new Queen(BLACK, \"b_q\", [7, 3]);\n    board[7][4] = new King(BLACK, \"b_k\", [7, 4]);\n    // board[7][5] = new Bishop(BLACK, \"b_b\", [7, 5]);\n    // board[7][6] = new Knight(BLACK, \"b_kn\", [7, 6]);\n    // board[7][7] = new Rook(BLACK, \"b_r\", [7, 7]);\n    // Display Pawns\n    for(let c = 0; c < 8; c++){\n      board[1][c] = new Pawn(WHITE, \"w_p\", [1, c]);\n      // board[6][c] = new Pawn(BLACK, \"b_p\", [6, c]);\n    }\n    return board;\n  }\n\n  resetBoard(){\n    this.setState({\n      board: this.setupBoard(), \n      selectedPiece: false, \n      turn: WHITE, \n      legalMoves: [], \n      kingPos: [[0, 4], [7, 4]], \n      inCheck: false, \n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false\n    });\n    Game = new ChessGame();\n  }\n  render(){\n    // Render Chess Board\n    let winMessage = <div>{this.state.winner? \"White Wins!!!\" : \"Black Wins!!!\"}</div>\n    let board = [];\n    let cOdd = true;\n    let rOdd = true;\n    for(let i = this.props.nRows - 1; i >= 0; i--){\n      let row = [] \n      cOdd = rOdd\n      for(let j = 0; j < this.props.nCols; j++){\n        const sqr = `${String.fromCharCode(97 + j)}${i}`\n        const isDark = cOdd? true: false;\n        const piece = this.state.board[i][j];\n        const pos = [i, j];\n        const isSelected = arrayEquals(pos, this.state.selectedPiece);\n        const isLegalMove = this.state.legalMoves.some(lm => arrayEquals(lm, pos)? true : false);\n        const isCheckmate = this.state.checkmate;\n        const draw = this.state.draw && piece instanceof King && (this.state.turn === piece.type);\n        const inCheck = piece instanceof King && this.state.inCheck && (this.state.turn === piece.type);\n        row.push(<Square key={sqr} isDark={isDark} piece={piece} selectPiece={() => this.selectPiece([i,j])} isSelected={isSelected} isLegal={isLegalMove} inCheck={inCheck} isCheckmate={isCheckmate} draw={draw}/>)\n        cOdd = !cOdd;\n      }\n      board.push(<tr key={i}>{row}</tr>)   \n      rOdd = !rOdd;  \n    }\n    // Render Chess Pieces\n    return (\n      <div className=\"Board\">\n        <table className=\"Table\">\n          <tbody>\n            {board}\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard}className=\"Reset\">Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module"}