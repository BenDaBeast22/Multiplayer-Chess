{"ast":null,"code":"const BLACK = false;\nconst WHITE = true; // Abstract Class\n\nclass Piece {\n  constructor(type, img, pos) {\n    if (this.constructor === Piece) {\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  } // True if row and column are on the board (8x8)\n\n\n  onBoard(r, c) {\n    if (r > 7 || r < 0 || c > 7 || c < 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isPiece(piece) {\n    if (piece instanceof Piece) return true;\n    return false;\n  } // True if piece on the square is the same color as the piece you are moving\n\n\n  sameColor(sqr, piece) {\n    if (sqr instanceof Piece && sqr.type === piece.type) {\n      return true;\n    }\n\n    return false;\n  }\n\n  oppositePiece(sqr, piece) {\n    if (sqr.type !== piece.type) return true;\n    return false;\n  }\n\n  emptySquare(sqr) {\n    console.log(sqr);\n    return !(sqr instanceof Piece);\n  }\n\n  straightLegalMoves(board, startPos, piece, comp, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n\n    for (let r = rStart + off; comp(r); r += off) {\n      if (board[r][cStart] instanceof Piece) {\n        if (board[r][cStart].type !== piece.type) {\n          lMoves.push([r, cStart]);\n        }\n\n        break;\n      }\n\n      lMoves.push([r, cStart]);\n    }\n\n    return lMoves;\n  }\n\n  horizantalLegalMoves(board, startPos, piece, comp, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n\n    for (let c = cStart + off; comp(c); c += off) {\n      if (board[rStart][c] instanceof Piece) {\n        if (board[rStart][c].type !== piece.type) {\n          lMoves.push([rStart, c]);\n        }\n\n        break;\n      }\n\n      lMoves.push([rStart, c]);\n    }\n\n    return lMoves;\n  }\n\n  diagonalLegalMoves(board, startPos, piece, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    let r = rStart + off;\n    let c = cStart + off;\n\n    while (this.onBoard(r, c)) {\n      if (this.isPiece(board[r][c])) {}\n    }\n  }\n\n}\n\nclass Pawn extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    let upOne = [];\n    let upOneRight = [];\n    let upOneLeft = [];\n\n    if (pawn.type === WHITE) {\n      upOne = [rStart + 1, cStart]; // Add up two legal move\n\n      if (rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n\n      upOneRight = [rStart + 1, cStart + 1];\n      upOneLeft = [rStart + 1, cStart - 1];\n    } else {\n      upOne = [rStart - 1, cStart]; // Add up two legal move\n\n      if (rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n\n      upOneRight = [rStart - 1, cStart + 1];\n      upOneLeft = [rStart - 1, cStart - 1];\n    } // Add up one legal move\n\n\n    const [uor, uoc] = upOne;\n    if (this.emptySquare(board[uor][uoc])) lMoves.push(upOne); // Add diagonal legal moves\n\n    const diagonal = [upOneRight, upOneLeft];\n\n    for (let move of diagonal) {\n      const [rd, rc] = move;\n\n      if (this.isPiece(board[rd][rc]) && this.oppositePieceSquare(board[rd][rc], pawn)) {\n        lMoves.push([rd, rc]);\n      }\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Bishop extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nclass Knight extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [-2, 1], [2, -1], [-2, -1]];\n\n    for (let move of moves) {\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff; // If move sqr is on the board and does not have one of your pieces on it move is valid\n\n      if (this.onBoard(r, c) && !this.sameColor(board[r][c], knight)) {\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Rook extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, rookPos, rook) {\n    let lMoves = [];\n    const upMoves = this.straightLegalMoves(board, rookPos, rook, r => r < 8, 1);\n    const downMoves = this.straightLegalMoves(board, rookPos, rook, r => r >= 0, -1);\n    const rightMoves = this.horizantalLegalMoves(board, rookPos, rook, c => c < 8, 1);\n    const leftMoves = this.horizantalLegalMoves(board, rookPos, rook, c => c >= 0, -1);\n    upMoves.forEach(move => lMoves.push(move));\n    downMoves.forEach(move => lMoves.push(move));\n    leftMoves.forEach(move => lMoves.push(move));\n    rightMoves.forEach(move => lMoves.push(move));\n    return lMoves;\n  }\n\n}\n\nclass Queen extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nclass King extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nexport { Piece, Pawn, Bishop, Knight, Rook, Queen, King };","map":{"version":3,"names":["BLACK","WHITE","Piece","constructor","type","img","pos","Error","imgName","onBoard","r","c","isPiece","piece","sameColor","sqr","oppositePiece","emptySquare","console","log","straightLegalMoves","board","startPos","comp","off","lMoves","rStart","cStart","push","horizantalLegalMoves","diagonalLegalMoves","Pawn","legalMoves","pawnPos","pawn","upOne","upOneRight","upOneLeft","uor","uoc","diagonal","move","rd","rc","oppositePieceSquare","Bishop","Knight","knightPos","knight","moves","rOff","cOff","lMove","Rook","rookPos","rook","upMoves","downMoves","rightMoves","leftMoves","forEach","Queen","King"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/Pieces.js"],"sourcesContent":["const BLACK = false;\nconst WHITE = true;\n\n// Abstract Class\nclass Piece {\n  constructor(type, img, pos){\n    if(this.constructor === Piece){\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  }\n  // True if row and column are on the board (8x8)\n  onBoard(r, c){\n    if(r > 7 || r < 0 || c > 7 || c < 0){\n      return false;\n    }\n    return true;\n  }\n  isPiece(piece) {\n    if (piece instanceof Piece) return true;\n    return false;\n  }\n  // True if piece on the square is the same color as the piece you are moving\n  sameColor(sqr, piece){\n    if(sqr instanceof Piece && sqr.type === piece.type){\n      return true;\n    }\n    return false;\n  }\n  oppositePiece(sqr, piece) {\n    if (sqr.type !== piece.type) return true;\n    return false;\n  }\n  emptySquare(sqr) {\n    console.log(sqr);\n    return !(sqr instanceof Piece);\n  }\n  straightLegalMoves(board, startPos, piece, comp, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    for (let r = rStart + off; comp(r); r += off) {\n      if (board[r][cStart] instanceof Piece) {\n        if (board[r][cStart].type !== piece.type) {\n          lMoves.push([r, cStart]);\n        }\n        break;\n      }\n      lMoves.push([r, cStart]);\n    }\n    return lMoves;\n  }\n  horizantalLegalMoves(board, startPos, piece, comp, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    for (let c = cStart + off; comp(c); c += off) {\n      if (board[rStart][c] instanceof Piece) {\n        if (board[rStart][c].type !== piece.type) {\n          lMoves.push([rStart, c]);\n        }\n        break;\n      }\n      lMoves.push([rStart, c]);\n    }\n    return lMoves;\n  }\n  diagonalLegalMoves(board, startPos, piece, off) {\n    const lMoves = [];\n    const [rStart, cStart] = startPos;\n    let r = rStart + off;\n    let c = cStart + off;\n    while (this.onBoard(r, c)) {\n      if (this.isPiece(board[r][c])) {\n\n      }\n    }\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    let upOne = [];\n    let upOneRight = [];\n    let upOneLeft = [];\n    if (pawn.type === WHITE) {\n      upOne = [rStart + 1, cStart];\n      // Add up two legal move\n      if(rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n      upOneRight = [rStart + 1, cStart + 1];\n      upOneLeft = [rStart + 1, cStart - 1];\n    } \n    else {\n      upOne = [rStart - 1, cStart];\n      // Add up two legal move\n      if(rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n      upOneRight = [rStart - 1, cStart + 1];\n      upOneLeft = [rStart - 1, cStart - 1];\n    }\n    // Add up one legal move\n    const [uor, uoc] = upOne;\n    if (this.emptySquare(board[uor][uoc])) lMoves.push(upOne);\n    // Add diagonal legal moves\n    const diagonal = [upOneRight, upOneLeft];\n    for (let move of diagonal) {\n      const [rd, rc] = move;\n      if (this.isPiece(board[rd][rc]) && this.oppositePieceSquare(board[rd][rc], pawn)) {\n        lMoves.push([rd, rc])\n      }\n    }\n    return lMoves;\n  }\n}\n\nclass Bishop extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\nclass Knight extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1,2], [-1,2], [1,-2], [-1,-2], [2,1], [-2,1], [2,-1], [-2,-1]];\n    for(let move of moves){\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff;\n      // If move sqr is on the board and does not have one of your pieces on it move is valid\n      if(this.onBoard(r, c) && !this.sameColor(board[r][c], knight)){\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }  \n    }\n    return lMoves;  \n  }\n}\n\nclass Rook extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, rookPos, rook) {\n    let lMoves = [];\n\n    const upMoves = this.straightLegalMoves(board, rookPos, rook, r => r < 8, 1);\n    const downMoves = this.straightLegalMoves(board, rookPos, rook, r => r >= 0, -1);\n    const rightMoves = this.horizantalLegalMoves(board, rookPos, rook, c => c < 8, 1);\n    const leftMoves = this.horizantalLegalMoves(board, rookPos, rook, c => c >= 0, -1);\n    upMoves.forEach(move => lMoves.push(move));\n    downMoves.forEach(move => lMoves.push(move));\n    leftMoves.forEach(move => lMoves.push(move));\n    rightMoves.forEach(move => lMoves.push(move))\n\n    return lMoves;\n  }\n}\n\nclass Queen extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\nclass King extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\n\nexport {Piece, Pawn, Bishop, Knight, Rook, Queen, King};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}