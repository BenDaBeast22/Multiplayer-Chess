{"ast":null,"code":"const BLACK = false;\nconst WHITE = true; // Abstract Class\n\nclass Piece {\n  constructor(type, img, pos) {\n    if (this.constructor === Piece) {\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  } // True if row and column are on the board (8x8)\n\n\n  onBoard(r, c) {\n    if (r > 7 || r < 0 || c > 7 || c < 0) {\n      return false;\n    }\n\n    return true;\n  } // True if piece on the square is the same color as the piece you are moving\n\n\n  sameColor(sqr, piece) {\n    if (sqr instanceof Piece && sqr.type === piece.type) {\n      return true;\n    }\n\n    return false;\n  }\n\n  opposingPieceOnSquare(sqr, piece) {\n    if (sqr instanceof Piece && sqr.type !== piece.type) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nclass Pawn extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    console.log(pawn);\n\n    if (pawn.type === WHITE) {\n      lMoves.push([rStart + 1, cStart]);\n\n      if (rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n\n      const [rTake, cTake] = [rStart + 1, cStart + 1];\n      console.log(`rTake = ${rTake} cTake = ${cTake}`);\n\n      if (this.opposingPieceOnSquare(board[(rTake, cTake)], pawn)) {\n        lMoves.push([rTake, cTake]);\n      }\n    } else {\n      lMoves.push([rStart - 1, cStart]);\n\n      if (rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n\n      const takePos = [rStart - 1, cStart - 1];\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Bishop extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nclass Knight extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [-2, 1], [2, -1], [-2, -1]];\n\n    for (let move of moves) {\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff; // If move sqr is on the board and does not have one of your pieces on it move is valid\n\n      if (this.onBoard(r, c) && !this.sameColor(board[r][c], knight)) {\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }\n    }\n\n    return lMoves;\n  }\n\n}\n\nclass Rook extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nclass Queen extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nclass King extends Piece {\n  constructor(type, img) {\n    super(type, img);\n  }\n\n}\n\nexport { Piece, Pawn, Bishop, Knight, Rook, Queen, King };","map":{"version":3,"names":["BLACK","WHITE","Piece","constructor","type","img","pos","Error","imgName","onBoard","r","c","sameColor","sqr","piece","opposingPieceOnSquare","Pawn","legalMoves","board","pawnPos","pawn","lMoves","rStart","cStart","console","log","push","rTake","cTake","takePos","Bishop","Knight","knightPos","knight","moves","move","rOff","cOff","lMove","Rook","Queen","King"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/Pieces.js"],"sourcesContent":["const BLACK = false;\nconst WHITE = true;\n\n// Abstract Class\nclass Piece {\n  constructor(type, img, pos){\n    if(this.constructor === Piece){\n      throw new Error('Class \"Piece\" cannot be instantiated');\n    }\n    this.type = type;\n    this.imgName = img;\n    this.pos = pos;\n  }\n  // True if row and column are on the board (8x8)\n  onBoard(r, c){\n    if(r > 7 || r < 0 || c > 7 || c < 0){\n      return false;\n    }\n    return true;\n  }\n  // True if piece on the square is the same color as the piece you are moving\n  sameColor(sqr, piece){\n    if(sqr instanceof Piece && sqr.type === piece.type){\n      return true;\n    }\n    return false;\n  }\n  opposingPieceOnSquare(sqr, piece) {\n    if (sqr instanceof Piece && sqr.type !== piece.type) {\n      return true;\n    }\n    return false;\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, pawnPos, pawn) {\n    let lMoves = [];\n    const [rStart, cStart] = pawnPos;\n    console.log(pawn);\n    if (pawn.type === WHITE) {\n      lMoves.push([rStart + 1, cStart]);\n      if(rStart === 1) {\n        lMoves.push([rStart + 2, cStart]);\n      }\n      const [rTake, cTake] = [rStart + 1, cStart + 1];\n      console.log(`rTake = ${rTake} cTake = ${cTake}` );\n      if (this.opposingPieceOnSquare(board[rTake, cTake], pawn)) {\n        lMoves.push([rTake, cTake]);\n      }\n    } \n    else {\n      lMoves.push([rStart - 1, cStart]);\n      if(rStart === 6) {\n        lMoves.push([rStart - 2, cStart]);\n      }\n      const takePos = [rStart-1, cStart-1];\n    }\n    return lMoves;\n  }\n}\n\nclass Bishop extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\nclass Knight extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n  legalMoves(board, knightPos, knight) {\n    let lMoves = [];\n    const [rStart, cStart] = knightPos;\n    const moves = [[1,2], [-1,2], [1,-2], [-1,-2], [2,1], [-2,1], [2,-1], [-2,-1]];\n    for(let move of moves){\n      const [rOff, cOff] = move;\n      let r = rStart + rOff;\n      let c = cStart + cOff;\n      // If move sqr is on the board and does not have one of your pieces on it move is valid\n      if(this.onBoard(r, c) && !this.sameColor(board[r][c], knight)){\n        const lMove = [r, c];\n        lMoves.push(lMove);\n      }  \n    }\n    return lMoves;  \n  }\n}\n\nclass Rook extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\nclass Queen extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\nclass King extends Piece {\n  constructor(type, img){\n    super(type, img);\n  }\n}\n\n\nexport {Piece, Pawn, Bishop, Knight, Rook, Queen, King};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}