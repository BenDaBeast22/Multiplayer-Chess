{"ast":null,"code":"import { arrayEquals } from './Helpers';\nimport { King, Piece } from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor() {\n    this.turn = WHITE;\n    this.kingPos = [[0, 4], [7, 4]];\n  }\n\n  isLegalMove(legalMoves, endPos) {\n    // Check that move is legal\n    for (let move of legalMoves) {\n      if (arrayEquals(move, endPos)) {\n        return true;\n      }\n    }\n  }\n\n  isKingAttacked(kingPos, oppSqrsCovered) {}\n\n  opposingSquaresCovered(board, turn) {\n    let squaresCovered = []; // console.log(board);\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n\n          if (turn !== piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n\n    return squaresCovered;\n  }\n\n  move(board, startPos, endPos, piece) {\n    // If legal move\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    console.log(startPos);\n    console.log(endPos);\n    const legalMoves = piece.legalMoves(board, startPos, piece);\n    console.log(board);\n\n    if (this.isLegalMove(legalMoves, endPos)) {\n      let newBoard = [...board];\n      console.log(newBoard);\n      newBoard[a][b] = \"-\";\n      newBoard[x][y] = piece; // Check move doesn't allow king to be attacked\n\n      const kIdx = piece.type ? 0 : 1;\n      const sqrsCovered = this.opposingSquaresCovered(newBoard, piece.type);\n\n      for (let move of sqrsCovered) {\n        if (arrayEquals(move, this.kingPos[kIdx])) {\n          console.log(\"iahsdfklhasdlkjfhlaksdjhflkasdhf\");\n          return false;\n        }\n      }\n\n      if (piece instanceof King) {\n        this.kingPos[kIdx] = endPos;\n      }\n\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      return board;\n    }\n\n    return false;\n  }\n\n}\n\nexport default ChessGame;","map":{"version":3,"names":["arrayEquals","King","Piece","BLACK","WHITE","ChessGame","constructor","turn","kingPos","isLegalMove","legalMoves","endPos","move","isKingAttacked","oppSqrsCovered","opposingSquaresCovered","board","squaresCovered","r","c","piece","type","forEach","m","push","startPos","a","b","x","y","console","log","newBoard","kIdx","sqrsCovered"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/ChessGame.js"],"sourcesContent":["import { arrayEquals } from './Helpers';\nimport { King, Piece } from './Pieces';\n\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor(){\n    this.turn = WHITE;\n    this.kingPos = [[0, 4], [7, 4]];\n  }\n  isLegalMove(legalMoves, endPos){\n    // Check that move is legal\n    for(let move of legalMoves){\n      if(arrayEquals(move, endPos)){\n        return true;\n      }\n    }\n  }\n  isKingAttacked(kingPos, oppSqrsCovered) {\n\n  }\n  opposingSquaresCovered(board, turn) {\n    let squaresCovered = [];\n    // console.log(board);\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n          if (turn !== piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n    return squaresCovered;\n\n  }\n  move(board, startPos, endPos, piece) {\n    // If legal move\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    console.log(startPos);\n    console.log(endPos);\n    const legalMoves = piece.legalMoves(board, startPos, piece);\n    console.log(board);\n    if(this.isLegalMove(legalMoves, endPos)){\n      let newBoard = [...board];\n      console.log(newBoard);\n      newBoard[a][b] = \"-\";\n      newBoard[x][y] = piece;\n      // Check move doesn't allow king to be attacked\n      const kIdx = piece.type? 0 : 1;\n      const sqrsCovered = this.opposingSquaresCovered(newBoard, piece.type);\n      for (let move of sqrsCovered) {\n        if (arrayEquals(move, this.kingPos[kIdx])) {\n          console.log(\"iahsdfklhasdlkjfhlaksdjhflkasdhf\")\n          return false;\n        }\n      }\n      if (piece instanceof King) {\n        this.kingPos[kIdx] = endPos;\n      }\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      return board;\n    }\n    return false;\n  }\n}\n\nexport default ChessGame;"],"mappings":"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"},"metadata":{},"sourceType":"module"}