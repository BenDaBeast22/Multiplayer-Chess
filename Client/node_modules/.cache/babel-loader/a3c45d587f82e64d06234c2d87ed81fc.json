{"ast":null,"code":"import { arrayEquals } from './Helpers';\nimport { King, Piece } from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor() {\n    this.turn = WHITE;\n    this.kingPos = [[0, 4], [7, 4]];\n  }\n\n  isLegalMove(legalMoves, endPos) {\n    // Check that move is legal\n    for (let move of legalMoves) {\n      if (arrayEquals(move, endPos)) {\n        return true;\n      }\n    }\n  }\n\n  isKingAttacked(kingPos, oppSqrsCovered) {}\n\n  opposingSquaresCovered(board, turn) {\n    let squaresCovered = [];\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c >= 0; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n          console.log(piece); // if (turn !== piece.type) {\n          //   console.log(\"Yoing\");\n          //   squaresCovered.push(piece.legalMoves(board, [r, c], piece));\n          // }\n        }\n      }\n    }\n\n    return squaresCovered;\n  }\n\n  move(board, startPos, endPos, piece) {\n    console.log(\"Moving piece\"); // If legal move\n\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    const legalMoves = piece.legalMoves(board, startPos, piece);\n\n    if (this.isLegalMove(legalMoves, endPos)) {\n      const newBoard = board;\n      newBoard[x][y] = piece; // Check move doesn't allow king to be attacked\n\n      const kIdx = piece.type ? 0 : 1;\n      console.log(\"Beofre Sqars covered\");\n      const sqrsCovered = this.opposingSquaresCovered(newBoard, piece.type);\n      console.log(\"After sqrs covered\");\n      console.log(sqrsCovered);\n\n      for (let move of sqrsCovered) {\n        console.log(\"In king loop\");\n\n        if (arrayEquals(move, this.kingPos)) {\n          return false;\n        }\n      }\n\n      if (piece instanceof King) {\n        this.kingPos[kIdx] = endPos;\n      }\n\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      return board;\n    }\n\n    return false;\n  }\n\n}\n\nexport default ChessGame;","map":{"version":3,"names":["arrayEquals","King","Piece","BLACK","WHITE","ChessGame","constructor","turn","kingPos","isLegalMove","legalMoves","endPos","move","isKingAttacked","oppSqrsCovered","opposingSquaresCovered","board","squaresCovered","r","c","piece","console","log","startPos","a","b","x","y","newBoard","kIdx","type","sqrsCovered"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/ChessGame.js"],"sourcesContent":["import { arrayEquals } from './Helpers';\nimport { King, Piece } from './Pieces';\n\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor(){\n    this.turn = WHITE;\n    this.kingPos = [[0, 4], [7, 4]];\n  }\n  isLegalMove(legalMoves, endPos){\n    // Check that move is legal\n    for(let move of legalMoves){\n      if(arrayEquals(move, endPos)){\n        return true;\n      }\n    }\n  }\n  isKingAttacked(kingPos, oppSqrsCovered) {\n\n  }\n  opposingSquaresCovered(board, turn) {\n    let squaresCovered = [];\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c >= 0; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n          console.log(piece);\n          // if (turn !== piece.type) {\n          //   console.log(\"Yoing\");\n          //   squaresCovered.push(piece.legalMoves(board, [r, c], piece));\n          // }\n        }\n      }\n    }\n    return squaresCovered;\n\n  }\n  move(board, startPos, endPos, piece) {\n    console.log(\"Moving piece\");\n    // If legal move\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    const legalMoves = piece.legalMoves(board, startPos, piece);\n    if(this.isLegalMove(legalMoves, endPos)){\n      const newBoard = board;\n      newBoard[x][y] = piece;\n      // Check move doesn't allow king to be attacked\n      const kIdx = piece.type? 0 : 1;\n      console.log(\"Beofre Sqars covered\");\n      const sqrsCovered = this.opposingSquaresCovered(newBoard, piece.type);\n      console.log(\"After sqrs covered\");\n      console.log(sqrsCovered);\n      for (let move of sqrsCovered) {\n        console.log(\"In king loop\");\n        if (arrayEquals(move, this.kingPos)) {\n          return false;\n        }\n      }\n      if (piece instanceof King) {\n        this.kingPos[kIdx] = endPos;\n      }\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      return board;\n    }\n    return false;\n  }\n}\n\nexport default ChessGame;"],"mappings":"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"},"metadata":{},"sourceType":"module"}