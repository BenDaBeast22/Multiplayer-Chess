{"ast":null,"code":"import { arrayEquals } from './Helpers';\nimport { King, Piece } from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor() {\n    this.turn = WHITE;\n  }\n\n  isLegalMove(legalMoves, endPos) {\n    // Check that move is legal\n    for (let move of legalMoves) {\n      if (arrayEquals(move, endPos)) {\n        return true;\n      }\n    }\n  }\n\n  squaresCovered(board, turn) {\n    let squaresCovered = [];\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n\n          if (turn === piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n\n    return squaresCovered;\n  }\n\n  move(board, startPos, endPos, piece, kingPos, putInCheck) {\n    // If in check you can't move a piece other than the king\n    if (putInCheck && !(piece instanceof King)) return [board, kingPos, false];\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    let inCheck = false;\n    const kIdx = piece.type ? 0 : 1;\n    const kOppIdx = kIdx ? 0 : 1;\n    const legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx]);\n\n    if (this.isLegalMove(legalMoves, endPos)) {\n      if (piece instanceof King) {\n        kingPos[kIdx] = endPos;\n      }\n\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      const squaresCovered = this.squaresCovered(board, piece.type);\n\n      for (let sqr of squaresCovered) {\n        if (arrayEquals(sqr, kingPos[kOppIdx])) {\n          inCheck = true;\n        }\n      }\n\n      return [board, kingPos, inCheck];\n    }\n\n    return [false, kingPos, inCheck];\n  }\n\n}\n\nexport default ChessGame;","map":{"version":3,"names":["arrayEquals","King","Piece","BLACK","WHITE","ChessGame","constructor","turn","isLegalMove","legalMoves","endPos","move","squaresCovered","board","r","c","piece","type","forEach","m","push","startPos","kingPos","putInCheck","a","b","x","y","inCheck","kIdx","kOppIdx","allowedMoves","sqr"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/ChessGame.js"],"sourcesContent":["import { arrayEquals } from './Helpers';\nimport { King, Piece } from './Pieces';\n\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor(){\n    this.turn = WHITE;\n  }\n  isLegalMove(legalMoves, endPos){\n    // Check that move is legal\n    for(let move of legalMoves){\n      if(arrayEquals(move, endPos)){\n        return true;\n      }\n    }\n  }\n  squaresCovered(board, turn) {\n    let squaresCovered = [];\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n          if (turn === piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n    return squaresCovered;\n  }\n  move(board, startPos, endPos, piece, kingPos, putInCheck) {\n    // If in check you can't move a piece other than the king\n    if (putInCheck && !(piece instanceof King)) return[board, kingPos, false];\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    let inCheck = false;\n    const kIdx = piece.type? 0 : 1;\n    const kOppIdx = kIdx? 0: 1;\n    const legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx]);\n    if (this.isLegalMove(legalMoves, endPos)) {\n      if (piece instanceof King) {\n        kingPos[kIdx] = endPos;\n      }\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      const squaresCovered = this.squaresCovered(board, piece.type);\n      for (let sqr of squaresCovered) {\n        if (arrayEquals(sqr, kingPos[kOppIdx])) {\n          inCheck = true;\n        }\n      }\n      return [board, kingPos, inCheck];\n    }\n    return [false, kingPos, inCheck];\n  }\n}\n\nexport default ChessGame;"],"mappings":"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"},"metadata":{},"sourceType":"module"}