{"ast":null,"code":"import { arrayEquals } from './Helpers';\nimport { King, Rook, Pawn, Piece } from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor() {\n    this.turn = WHITE;\n  }\n\n  isLegalMove(legalMoves, endPos) {\n    // Check that move is legal\n    for (let move of legalMoves) {\n      if (arrayEquals(move, endPos)) {\n        return true;\n      }\n    }\n  }\n\n  checkedOpponent(board, turn, oppKingPos) {\n    const squaresCovered = this.squaresCovered(board, turn);\n\n    for (let sqr of squaresCovered) {\n      if (arrayEquals(sqr, oppKingPos)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  squaresCovered(board, turn) {\n    let squaresCovered = [];\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n\n          if (turn === piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n\n    return squaresCovered;\n  }\n\n  isCheckmate(board, startPos, piece, kingOppPos) {\n    // Check every move you can to see if opponent can get out of check \n    const kingOppStartPos = kingOppPos;\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const oppStartPos = board[r][c];\n\n        if (oppStartPos instanceof Piece && oppStartPos.type !== piece.type) {\n          let lMoves; // Need to check allowed moves for king since piece that king cannot take could be putting him in check\n\n          if (oppStartPos instanceof King) lMoves = oppStartPos.allowedMoves(board, [r, c], board[r][c], kingOppPos, false);else lMoves = oppStartPos.legalMoves(board, [r, c], board[r][c]);\n          console.log(\"Piece lmoves\");\n          console.log(`r = ${r}, c = ${c}`);\n          console.log(oppStartPos.imgName);\n          console.log(lMoves);\n\n          for (let move of lMoves) {\n            const [x, y] = move;\n            let originalPos = board[r][c];\n            let moveSquare = board[x][y];\n            board[r][c] = \"-\";\n            board[x][y] = oppStartPos;\n            if (oppStartPos instanceof King) kingOppPos = [x, y];\n            const squaresCovered = this.squaresCovered(board, piece.type); // if (board[r][c].img === \"b_k\") {\n            //   console.log(\"squaresCovered\");\n            //   console.log(squaresCovered)\n            //   console.log(\"kingPos\");\n            //   console.log(kingOppPos);\n            // }\n\n            if (!squaresCovered.some(s => arrayEquals(s, kingOppPos))) {\n              board[r][c] = originalPos;\n              board[x][y] = moveSquare; // console.log(\"squaresCovered\");\n              // console.log(squaresCovered);\n              // console.log(\"kingOppPos\");\n              // console.log(kingOppPos);\n\n              if (oppStartPos instanceof King) kingOppPos = kingOppStartPos;\n              return false;\n            }\n\n            board[x][y] = moveSquare;\n            board[r][c] = originalPos;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  kingUnderAttack(board, startPos, endPos, piece, kingPos) {\n    if (piece instanceof King) kingPos = endPos;\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    const endPiece = board[x][y];\n    board[a][b] = \"-\";\n    board[x][y] = piece; // Check move doesn't allow king to be attacked\n\n    const sqrsCovered = this.opposingSquaresCovered(board, piece.type);\n\n    for (let move of sqrsCovered) {\n      if (arrayEquals(move, kingPos)) {\n        board[x][y] = endPiece;\n        board[a][b] = piece;\n        return true;\n      }\n    }\n\n    board[x][y] = endPiece;\n    board[a][b] = piece;\n    return false;\n  }\n\n  move(board, startPos, endPos, piece, kingPos, putInCheck, castleCheck, lastEnPassant) {\n    const [a, b] = startPos;\n    let [x, y] = endPos;\n    let inCheck = false;\n    let checkmate = false;\n    const kIdx = piece.type ? 0 : 1;\n    const kOppIdx = kIdx ? 0 : 1;\n    const cIdx = piece.type ? 0 : 1;\n    let legalMoves;\n\n    if (piece instanceof Pawn) {\n      legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx], lastEnPassant);\n    } else legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx], castleCheck[cIdx]);\n\n    if (this.isLegalMove(legalMoves, endPos)) {\n      // If moving piece is king adjust kingPos and castle rights set to false\n      if (piece instanceof King) {\n        const kColDiff = y - b;\n        const rIdx = piece.type ? 0 : 7; // Right Castles\n\n        if (!putInCheck && kColDiff === 2) {\n          kingPos[kIdx] = endPos;\n          board[rIdx][5] = board[rIdx][7];\n          board[rIdx][7] = \"-\";\n        } // Left Castles\n        else if (!putInCheck && kColDiff === -2 || kColDiff === -3) {\n          kingPos[kIdx] = [rIdx, 2];\n          y = 2;\n          board[rIdx][3] = board[rIdx][0];\n          board[rIdx][0] = \"-\";\n        } else {\n          kingPos[kIdx] = endPos;\n          castleCheck[cIdx][1] = false;\n        }\n      } else if (piece instanceof Rook) {\n        if (a === 0) castleCheck[cIdx][0] = false;else if (a === 7) castleCheck[cIdx][2] = false;\n      } else if (piece instanceof Pawn) {\n        // Check if possible enPassant (Pawn moved up 2)\n        if (a == 1 && x == 3 || a == 6 && x == 4) {\n          lastEnPassant = endPos;\n        }\n      }\n\n      board[a][b] = \"-\";\n      board[x][y] = piece; // Sets check in state if put opponent in check\n\n      const inCheck = this.checkedOpponent(board, piece.type, kingPos[kOppIdx]);\n\n      if (inCheck && this.isCheckmate(board, startPos, piece, kingPos[kOppIdx])) {\n        return [false, kingPos, true, true, false, lastEnPassant];\n      }\n\n      return [board, kingPos, inCheck, checkmate, castleCheck, lastEnPassant];\n    }\n\n    return [false, kingPos, inCheck, checkmate, castleCheck, lastEnPassant];\n  }\n\n}\n\nexport default ChessGame;","map":{"version":3,"names":["arrayEquals","King","Rook","Pawn","Piece","BLACK","WHITE","ChessGame","constructor","turn","isLegalMove","legalMoves","endPos","move","checkedOpponent","board","oppKingPos","squaresCovered","sqr","r","c","piece","type","forEach","m","push","isCheckmate","startPos","kingOppPos","kingOppStartPos","oppStartPos","lMoves","allowedMoves","console","log","imgName","x","y","originalPos","moveSquare","some","s","kingUnderAttack","kingPos","a","b","endPiece","sqrsCovered","opposingSquaresCovered","putInCheck","castleCheck","lastEnPassant","inCheck","checkmate","kIdx","kOppIdx","cIdx","kColDiff","rIdx"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/ChessGame.js"],"sourcesContent":["import { arrayEquals } from './Helpers';\nimport { King, Rook, Pawn, Piece } from './Pieces';\n\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor(){\n    this.turn = WHITE;\n  }\n  isLegalMove(legalMoves, endPos){\n    // Check that move is legal\n    for(let move of legalMoves){\n      if(arrayEquals(move, endPos)){\n        return true;\n      }\n    }\n  }\n  checkedOpponent(board, turn, oppKingPos) {\n    const squaresCovered = this.squaresCovered(board, turn);\n    for (let sqr of squaresCovered) {\n      if (arrayEquals(sqr, oppKingPos)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  squaresCovered(board, turn) {\n    let squaresCovered = [];\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n          if (turn === piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n    return squaresCovered;\n  }\n  isCheckmate(board, startPos, piece, kingOppPos){\n    // Check every move you can to see if opponent can get out of check \n    const kingOppStartPos = kingOppPos;\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const oppStartPos = board[r][c];\n        if (oppStartPos instanceof Piece && oppStartPos.type !== piece.type) {\n          let lMoves;\n          // Need to check allowed moves for king since piece that king cannot take could be putting him in check\n          if (oppStartPos instanceof King) lMoves = oppStartPos.allowedMoves(board, [r, c], board[r][c], kingOppPos, false);\n          else lMoves = oppStartPos.legalMoves(board, [r, c], board[r][c]);\n          console.log(\"Piece lmoves\");\n          console.log(`r = ${r}, c = ${c}`);\n          console.log(oppStartPos.imgName);\n          console.log(lMoves);\n          for (let move of lMoves) {\n            const [x, y] = move;\n            let originalPos = board[r][c];\n            let moveSquare = board[x][y]; \n            board[r][c] = \"-\";\n            board[x][y] = oppStartPos;\n            if (oppStartPos instanceof King) kingOppPos = [x, y];\n            const squaresCovered = this.squaresCovered(board, piece.type);\n            // if (board[r][c].img === \"b_k\") {\n            //   console.log(\"squaresCovered\");\n            //   console.log(squaresCovered)\n            //   console.log(\"kingPos\");\n            //   console.log(kingOppPos);\n            // }\n            if (!squaresCovered.some(s => arrayEquals(s, kingOppPos))) {\n              board[r][c] = originalPos;\n              board[x][y] = moveSquare;\n              // console.log(\"squaresCovered\");\n              // console.log(squaresCovered);\n              // console.log(\"kingOppPos\");\n              // console.log(kingOppPos);\n              if (oppStartPos instanceof King) kingOppPos = kingOppStartPos;\n              return false;\n            }\n            board[x][y] = moveSquare;\n            board[r][c] = originalPos;\n          }\n        }\n      }\n    }\n    return true;\n  }\n  kingUnderAttack(board, startPos, endPos, piece, kingPos) {\n    if (piece instanceof King) kingPos = endPos;\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    const endPiece = board[x][y];\n    board[a][b] = \"-\";\n    board[x][y] = piece;\n    // Check move doesn't allow king to be attacked\n    const sqrsCovered = this.opposingSquaresCovered(board, piece.type);\n    for (let move of sqrsCovered) {\n      if (arrayEquals(move, kingPos)) {\n        board[x][y] = endPiece;\n        board[a][b] = piece;\n        return true;\n      }\n    }\n    board[x][y] = endPiece;\n    board[a][b] = piece;\n    return false;\n  } \n  move(board, startPos, endPos, piece, kingPos, putInCheck, castleCheck, lastEnPassant) {\n    const [a, b] = startPos;\n    let [x, y] = endPos;\n    let inCheck = false;\n    let checkmate = false;\n    const kIdx = piece.type? 0 : 1;\n    const kOppIdx = kIdx? 0: 1;\n    const cIdx = piece.type? 0 : 1;\n    let legalMoves;\n    if (piece instanceof Pawn) {\n\n      legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx], lastEnPassant);\n    }\n    else legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx], castleCheck[cIdx]);\n    if (this.isLegalMove(legalMoves, endPos)) {\n      // If moving piece is king adjust kingPos and castle rights set to false\n      if (piece instanceof King) {\n        const kColDiff = y - b;\n        const rIdx = piece.type? 0: 7;\n        // Right Castles\n        if (!putInCheck && kColDiff === 2) {\n          kingPos[kIdx] = endPos;\n          board[rIdx][5] = board[rIdx][7];\n          board[rIdx][7] = \"-\";\n        }\n        // Left Castles\n        else if(!putInCheck && kColDiff === -2 || kColDiff === -3) {\n          kingPos[kIdx] = [rIdx, 2];\n          y = 2;\n          board[rIdx][3] = board[rIdx][0];\n          board[rIdx][0] = \"-\";\n        } else {\n          kingPos[kIdx] = endPos;\n          castleCheck[cIdx][1] = false;\n        }\n      }\n      else if (piece instanceof Rook) {\n        if (a === 0) castleCheck[cIdx][0] = false;\n        else if (a === 7) castleCheck[cIdx][2] = false;\n      }\n      else if (piece instanceof Pawn) {\n        // Check if possible enPassant (Pawn moved up 2)\n        if ((a == 1 && x == 3) || (a == 6 && x == 4)) {\n          lastEnPassant = endPos;\n        }\n      }\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      // Sets check in state if put opponent in check\n      const inCheck = this.checkedOpponent(board, piece.type, kingPos[kOppIdx]);\n      if (inCheck && this.isCheckmate(board, startPos, piece, kingPos[kOppIdx])) {\n        return [false, kingPos, true, true, false, lastEnPassant];\n      }\n      return [board, kingPos, inCheck, checkmate, castleCheck, lastEnPassant];\n    }\n    return [false, kingPos, inCheck, checkmate, castleCheck, lastEnPassant];\n  }\n}\n\nexport default ChessGame;"],"mappings":"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"},"metadata":{},"sourceType":"module"}