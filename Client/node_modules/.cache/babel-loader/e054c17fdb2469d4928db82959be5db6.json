{"ast":null,"code":"import { Piece, Pawn, Bishop, Knight, Rook, Queen, King } from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\nfunction arrayEquals(a, b) {\n  return Array.isArray(a) && Array.isArray(b) && a.length === b.length && a.every((val, index) => val === b[index]);\n} // Sets up chessboard array with pieces\n\n\nfunction setupBoard() {\n  let board = []; // Generate Empty Board\n\n  for (let r = 0; r < 8; r++) {\n    let row = [];\n\n    for (let c = 0; c < 8; c++) {\n      row.push(\"-\");\n    }\n\n    board.push(row);\n  } // Display White Pieces\n\n\n  board[0][0] = new Rook(WHITE, \"w_r\");\n  board[0][1] = new Knight(WHITE, \"w_kn\");\n  board[0][2] = new Bishop(WHITE, \"w_b\");\n  board[0][3] = new Queen(WHITE, \"w_q\");\n  board[0][4] = new King(WHITE, \"w_k\");\n  board[0][5] = new Bishop(WHITE, \"w_b\");\n  board[0][6] = new Knight(WHITE, \"w_kn\");\n  board[0][7] = new Rook(WHITE, \"w_r\"); // Display Black Pieces\n\n  board[7][0] = new Rook(BLACK, \"b_r\");\n  board[7][1] = new Knight(BLACK, \"b_kn\");\n  board[7][2] = new Bishop(BLACK, \"b_b\");\n  board[7][3] = new Queen(BLACK, \"b_q\");\n  board[7][4] = new King(BLACK, \"b_k\");\n  board[7][5] = new Bishop(BLACK, \"b_b\");\n  board[7][6] = new Knight(BLACK, \"b_kn\");\n  board[7][7] = new Rook(BLACK, \"b_r\"); // Display Pawns\n\n  for (let c = 0; c < 8; c++) {\n    board[1][c] = new Pawn(WHITE, \"w_p\", [1, c]);\n    board[6][c] = new Pawn(BLACK, \"b_p\", [6, c]);\n  }\n\n  return board;\n}\n\nexport { arrayEquals, setupBoard };","map":{"version":3,"names":["Piece","Pawn","Bishop","Knight","Rook","Queen","King","BLACK","WHITE","arrayEquals","a","b","Array","isArray","length","every","val","index","setupBoard","board","r","row","c","push"],"sources":["/Users/benjamincritoph/Programming/React/chess/Client/src/Helpers.js"],"sourcesContent":["import {Piece, Pawn, Bishop, Knight, Rook, Queen, King} from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\n\nfunction arrayEquals(a, b) {\n  return Array.isArray(a) &&\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every((val, index) => val === b[index]);\n}\n\n// Sets up chessboard array with pieces\nfunction setupBoard() {\n  let board = [];\n  // Generate Empty Board\n  for (let r = 0; r < 8; r++) {\n    let row = []\n    for (let c = 0; c < 8; c++) {\n      row.push(\"-\") \n    }\n    board.push(row)\n  }\n  // Display White Pieces\n  board[0][0] = new Rook(WHITE, \"w_r\");\n  board[0][1] = new Knight(WHITE, \"w_kn\");\n  board[0][2] = new Bishop(WHITE, \"w_b\");\n  board[0][3] = new Queen(WHITE, \"w_q\");\n  board[0][4] = new King(WHITE, \"w_k\");\n  board[0][5] = new Bishop(WHITE, \"w_b\");\n  board[0][6] = new Knight(WHITE, \"w_kn\");\n  board[0][7] = new Rook(WHITE, \"w_r\");\n  // Display Black Pieces\n  board[7][0] = new Rook(BLACK, \"b_r\");\n  board[7][1] = new Knight(BLACK, \"b_kn\");\n  board[7][2] = new Bishop(BLACK, \"b_b\");\n  board[7][3] = new Queen(BLACK, \"b_q\");\n  board[7][4] = new King(BLACK, \"b_k\");\n  board[7][5] = new Bishop(BLACK, \"b_b\");\n  board[7][6] = new Knight(BLACK, \"b_kn\");\n  board[7][7] = new Rook(BLACK, \"b_r\");\n  // Display Pawns\n  for(let c = 0; c < 8; c++){\n    board[1][c] = new Pawn(WHITE, \"w_p\", [1, c]);\n    board[6][c] = new Pawn(BLACK, \"b_p\", [6, c]);\n  }\n  return board;\n}\nexport {arrayEquals, setupBoard};"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,IAArC,EAA2CC,KAA3C,EAAkDC,IAAlD,QAA6D,UAA7D;AACA,MAAMC,KAAK,GAAG,KAAd;AACA,MAAMC,KAAK,GAAG,IAAd;;AAGA,SAASC,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;EACzB,OAAOC,KAAK,CAACC,OAAN,CAAcH,CAAd,KACHE,KAAK,CAACC,OAAN,CAAcF,CAAd,CADG,IAEHD,CAAC,CAACI,MAAF,KAAaH,CAAC,CAACG,MAFZ,IAGHJ,CAAC,CAACK,KAAF,CAAQ,CAACC,GAAD,EAAMC,KAAN,KAAgBD,GAAG,KAAKL,CAAC,CAACM,KAAD,CAAjC,CAHJ;AAID,C,CAED;;;AACA,SAASC,UAAT,GAAsB;EACpB,IAAIC,KAAK,GAAG,EAAZ,CADoB,CAEpB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1B,IAAIC,GAAG,GAAG,EAAV;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1BD,GAAG,CAACE,IAAJ,CAAS,GAAT;IACD;;IACDJ,KAAK,CAACI,IAAN,CAAWF,GAAX;EACD,CATmB,CAUpB;;;EACAF,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIf,IAAJ,CAASI,KAAT,EAAgB,KAAhB,CAAd;EACAW,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIhB,MAAJ,CAAWK,KAAX,EAAkB,MAAlB,CAAd;EACAW,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIjB,MAAJ,CAAWM,KAAX,EAAkB,KAAlB,CAAd;EACAW,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAId,KAAJ,CAAUG,KAAV,EAAiB,KAAjB,CAAd;EACAW,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIb,IAAJ,CAASE,KAAT,EAAgB,KAAhB,CAAd;EACAW,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIjB,MAAJ,CAAWM,KAAX,EAAkB,KAAlB,CAAd;EACAW,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIhB,MAAJ,CAAWK,KAAX,EAAkB,MAAlB,CAAd;EACAW,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIf,IAAJ,CAASI,KAAT,EAAgB,KAAhB,CAAd,CAlBoB,CAmBpB;;EACAW,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIf,IAAJ,CAASG,KAAT,EAAgB,KAAhB,CAAd;EACAY,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIhB,MAAJ,CAAWI,KAAX,EAAkB,MAAlB,CAAd;EACAY,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIjB,MAAJ,CAAWK,KAAX,EAAkB,KAAlB,CAAd;EACAY,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAId,KAAJ,CAAUE,KAAV,EAAiB,KAAjB,CAAd;EACAY,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIb,IAAJ,CAASC,KAAT,EAAgB,KAAhB,CAAd;EACAY,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIjB,MAAJ,CAAWK,KAAX,EAAkB,KAAlB,CAAd;EACAY,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIhB,MAAJ,CAAWI,KAAX,EAAkB,MAAlB,CAAd;EACAY,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,IAAc,IAAIf,IAAJ,CAASG,KAAT,EAAgB,KAAhB,CAAd,CA3BoB,CA4BpB;;EACA,KAAI,IAAIe,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;IACxBH,KAAK,CAAC,CAAD,CAAL,CAASG,CAAT,IAAc,IAAIrB,IAAJ,CAASO,KAAT,EAAgB,KAAhB,EAAuB,CAAC,CAAD,EAAIc,CAAJ,CAAvB,CAAd;IACAH,KAAK,CAAC,CAAD,CAAL,CAASG,CAAT,IAAc,IAAIrB,IAAJ,CAASM,KAAT,EAAgB,KAAhB,EAAuB,CAAC,CAAD,EAAIe,CAAJ,CAAvB,CAAd;EACD;;EACD,OAAOH,KAAP;AACD;;AACD,SAAQV,WAAR,EAAqBS,UAArB"},"metadata":{},"sourceType":"module"}