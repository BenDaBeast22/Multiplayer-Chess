{"ast":null,"code":"import { arrayEquals } from './Helpers';\nimport { King, Piece } from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor() {\n    this.turn = WHITE;\n  }\n\n  isLegalMove(legalMoves, endPos) {\n    // Check that move is legal\n    for (let move of legalMoves) {\n      if (arrayEquals(move, endPos)) {\n        return true;\n      }\n    }\n  }\n\n  checkedOpponent(board, turn, oppKingPos) {\n    const squaresCovered = this.squaresCovered(board, turn);\n\n    for (let sqr of squaresCovered) {\n      if (arrayEquals(sqr, oppKingPos)) {\n        inCheck = true;\n      }\n    }\n  }\n\n  squaresCovered(board, turn) {\n    let squaresCovered = [];\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n\n          if (turn === piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n\n    return squaresCovered;\n  }\n\n  move(board, startPos, endPos, piece, kingPos, putInCheck) {\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    let inCheck = false;\n    const kIdx = piece.type ? 0 : 1;\n    const kOppIdx = kIdx ? 0 : 1;\n    const legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx]);\n\n    if (this.isLegalMove(legalMoves, endPos)) {\n      if (piece instanceof King) {\n        kingPos[kIdx] = endPos;\n      }\n\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      const inCheck = checkedOpponent(board, piece.type, kingPos[kOppIdx]);\n      return [board, kingPos, inCheck];\n    }\n\n    return [false, kingPos, inCheck];\n  }\n\n}\n\nexport default ChessGame;","map":{"version":3,"names":["arrayEquals","King","Piece","BLACK","WHITE","ChessGame","constructor","turn","isLegalMove","legalMoves","endPos","move","checkedOpponent","board","oppKingPos","squaresCovered","sqr","inCheck","r","c","piece","type","forEach","m","push","startPos","kingPos","putInCheck","a","b","x","y","kIdx","kOppIdx","allowedMoves"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/ChessGame.js"],"sourcesContent":["import { arrayEquals } from './Helpers';\nimport { King, Piece } from './Pieces';\n\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor(){\n    this.turn = WHITE;\n  }\n  isLegalMove(legalMoves, endPos){\n    // Check that move is legal\n    for(let move of legalMoves){\n      if(arrayEquals(move, endPos)){\n        return true;\n      }\n    }\n  }\n  checkedOpponent(board, turn, oppKingPos) {\n    const squaresCovered = this.squaresCovered(board, turn);\n    for (let sqr of squaresCovered) {\n      if (arrayEquals(sqr, oppKingPos)) {\n        inCheck = true;\n      }\n    }\n  }\n  squaresCovered(board, turn) {\n    let squaresCovered = [];\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n          if (turn === piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n    return squaresCovered;\n  }\n  move(board, startPos, endPos, piece, kingPos, putInCheck) {\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    let inCheck = false;\n    const kIdx = piece.type? 0 : 1;\n    const kOppIdx = kIdx? 0: 1;\n    const legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx]);\n    if (this.isLegalMove(legalMoves, endPos)) {\n      if (piece instanceof King) {\n        kingPos[kIdx] = endPos;\n      }\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      const inCheck = checkedOpponent(board, piece.type, kingPos[kOppIdx]);\n      return [board, kingPos, inCheck];\n    }\n    return [false, kingPos, inCheck];\n  }\n}\n\nexport default ChessGame;"],"mappings":"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"},"metadata":{},"sourceType":"module"}