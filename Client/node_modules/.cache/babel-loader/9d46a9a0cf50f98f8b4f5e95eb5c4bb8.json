{"ast":null,"code":"var _jsxFileName = \"/Users/benjamincritoph/Programming/React/chess/src/Board.js\";\nimport './Board.css';\nimport React from 'react';\nimport Square from './Square';\nimport { Piece, King, Queen, Knight, Bishop, Rook } from './Pieces';\nimport { arrayEquals, setupBoard } from './Helpers';\nimport { Howl, Howler } from 'howler';\nimport ChessGame from './ChessGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BLACK = false;\nconst WHITE = true;\nconst soundEffects = {\n  whiteMove: \"./whiteMove.wav\",\n  blackMove: \"./blackMove.wav\"\n};\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false,\n      promotePawn: false\n    };\n    this.resetBoard = this.resetBoard.bind(this);\n    this.dropMove = this.dropMove.bind(this);\n  } // Checks to see if another piece is selected\n\n\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n\n    if (board[or][oc].type === board[r][c].type && !(or === r && oc === c)) {\n      return true;\n    }\n\n    return false;\n  } // Called when player clicks on a piece\n\n\n  selectPiece(selectedPiecePos) {\n    const [r, c] = selectedPiecePos;\n    const {\n      board,\n      lastSelectedPiecePos,\n      kingPos,\n      inCheck,\n      castleCheck,\n      lastEnPassant,\n      draw,\n      turn,\n      promotePawn\n    } = this.state; // If a move is made\n\n    if (lastSelectedPiecePos && !this.changeSelection(board, lastSelectedPiecePos, selectedPiecePos)) {\n      if (arrayEquals(selectedPiecePos, lastSelectedPiecePos)) {\n        this.setState({\n          lastSelectedPiecePos: false,\n          legalMoves: []\n        });\n        return;\n      }\n\n      const [or, oc] = lastSelectedPiecePos;\n      const lastSelectedPiece = board[or][oc];\n      const retBoard = Game.move(board, lastSelectedPiecePos, selectedPiecePos, lastSelectedPiece, kingPos, inCheck, castleCheck, lastEnPassant, draw, promotePawn);\n\n      if (retBoard.checkmate) {\n        this.setState({\n          winner: lastSelectedPiece.type,\n          checkmate: true,\n          inCheck: true,\n          legalMoves: [],\n          lastSelectedPiecePos: false,\n          turn: !turn\n        });\n        return;\n      } else if (retBoard.draw) {\n        this.setState({\n          draw: true,\n          legalMoves: [],\n          lastSelectedPiecePos: false,\n          turn: !turn\n        });\n        return;\n      } else if (retBoard.board) {\n        this.setState({\n          board: retBoard.board,\n          lastSelectedPiecePos: false,\n          turn: !turn,\n          legalMoves: [],\n          kingPos: retBoard.kingPos,\n          inCheck: retBoard.inCheck,\n          checkmate: retBoard.checkmate,\n          castleCheck: retBoard.castleCheck,\n          lastEnPassant: retBoard.lastEnPassant\n        });\n\n        if (turn === WHITE) {\n          console.log(\"Soundeffect\");\n          this.playSound(\"./soundEffects/whiteMove.wav\");\n        } else this.playSound(\"./soundEffects/blackMove.wav\");\n      }\n\n      return;\n    } // If piece is selected or switch to another piece\n\n\n    const selectedPiece = board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== turn) return;\n    const kIdx = selectedPiece.type ? 0 : 1;\n    const cIdx = selectedPiece.type ? 0 : 1; // Show legal moves when piece is selected\n\n    const lMoves = selectedPiece.allowedMoves(board, selectedPiecePos, selectedPiece, kingPos[kIdx], castleCheck[cIdx], lastEnPassant);\n    this.setState({\n      lastSelectedPiecePos: selectedPiecePos,\n      legalMoves: lMoves\n    });\n  }\n\n  dropMove(selectedPiece, movedSqr) {\n    this.setState({\n      pos: selectedPiece\n    });\n    this.selectPiece(movedSqr);\n  }\n\n  playSound(src) {\n    const sound = new Howl({\n      src\n    });\n    sound.play();\n  }\n\n  selectorSquares(pawnPromote) {\n    let arr = [];\n    const [r] = pawnPromote;\n    const turn = r === 7 ? WHITE : BLACK;\n\n    if (turn === WHITE) {\n      arr.push(new Queen(WHITE, \"w_q\"), new Knight(WHITE, \"w_k\"), new Rook(WHITE, \"w_r\"), new Bishop(WHITE, \"w_b\"));\n    } else {\n      arr.push(new Queen(BLACK, \"b_q\"), new Knight(BLACK, \"b_k\"), new Rook(BLACK, \"b_r\"), new Bishop(BLACK, \"b_b\"));\n    }\n\n    return arr;\n  }\n\n  selectSquare(pawnPromote, selectSquares, pos) {\n    const [pr, pc] = pawnPromote;\n    const [r, c] = pos;\n    const turn = r === 7 ? WHITE : BLACK;\n\n    if (turn === WHITE) {\n      if (c === pc && r <= 3) {\n        return selectSquares[r];\n      }\n    } else {\n      if (c === pc && r <= 4 && r < 8) {\n        return selectSquares[r - 4];\n      }\n    }\n  } // Resets chessboard state\n\n\n  resetBoard() {\n    this.setState({\n      board: setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false,\n      promotePawn: false\n    });\n    Game = new ChessGame();\n  }\n\n  render() {\n    const {\n      board,\n      lastSelectedPiecePos,\n      turn,\n      legalMoves,\n      inCheck,\n      checkmate,\n      draw,\n      winner,\n      promotePawn\n    } = this.state;\n\n    let winMessage = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: winner ? \"White Wins!!!\" : \"Black Wins!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 22\n    }, this);\n\n    let chessBoard = [];\n    let cOdd = true;\n    let rOdd = true;\n    let selectorSquares;\n    if (promotePawn) selectorSquares = this.selectorSquares(promotePawn, turn); // Iterated through rows backwards so that white would be at row 0 similar to chess notation\n\n    for (let r = 7; r >= 0; r--) {\n      let row = [];\n      cOdd = rOdd;\n\n      for (let c = 0; c < this.props.nCols; c++) {\n        const sqr = `${String.fromCharCode(97 + c)}${r + 1}`;\n        const isDark = cOdd ? true : false;\n        const piece = board[r][c];\n        const pos = [r, c];\n        const isSelected = arrayEquals(pos, lastSelectedPiecePos);\n        const isLegalMove = legalMoves.some(lm => arrayEquals(lm, pos) ? true : false);\n        const isDraw = draw && piece instanceof King && turn === piece.type;\n        const kingInCheck = piece instanceof King && inCheck && turn === piece.type;\n\n        if (promotePawn) {\n          const [pr, pc] = promotePawn;\n          const selectorSquare = this.selectorSquare(promotePawn, selectorSquares, pos);\n        }\n\n        row.push( /*#__PURE__*/_jsxDEV(Square, {\n          pos: pos,\n          isDark: isDark,\n          piece: piece,\n          selectPiece: () => this.selectPiece([r, c]),\n          isSelected: isSelected,\n          isLegal: isLegalMove,\n          inCheck: kingInCheck,\n          isCheckmate: checkmate,\n          draw: isDraw,\n          dropMove: this.dropMove,\n          selectorSquare: selectorSquare\n        }, sqr, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 18\n        }, this));\n        cOdd = !cOdd;\n      }\n\n      chessBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        class: \"Row\",\n        children: row\n      }, r + 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 23\n      }, this));\n      rOdd = !rOdd;\n    } // Render Chess Pieces\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Table\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: chessBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetBoard,\n        className: \"newGame\",\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  nRows: 8,\n  nCols: 8\n};\nexport default Board;","map":{"version":3,"names":["React","Square","Piece","King","Queen","Knight","Bishop","Rook","arrayEquals","setupBoard","Howl","Howler","ChessGame","BLACK","WHITE","soundEffects","whiteMove","blackMove","Game","Board","Component","constructor","props","state","board","lastSelectedPiecePos","turn","legalMoves","kingPos","inCheck","checkmate","winner","castleCheck","lastEnPassant","draw","promotePawn","resetBoard","bind","dropMove","changeSelection","selectedPiece","newPos","r","c","or","oc","type","selectPiece","selectedPiecePos","setState","lastSelectedPiece","retBoard","move","console","log","playSound","kIdx","cIdx","lMoves","allowedMoves","movedSqr","pos","src","sound","play","selectorSquares","pawnPromote","arr","push","selectSquare","selectSquares","pr","pc","render","winMessage","chessBoard","cOdd","rOdd","row","nCols","sqr","String","fromCharCode","isDark","piece","isSelected","isLegalMove","some","lm","isDraw","kingInCheck","selectorSquare","defaultProps","nRows"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/Board.js"],"sourcesContent":["import './Board.css'\nimport React from 'react'\nimport Square from './Square';\nimport { Piece, King, Queen, Knight, Bishop, Rook } from './Pieces';\nimport { arrayEquals, setupBoard } from './Helpers';\nimport { Howl, Howler } from 'howler';\nimport ChessGame from './ChessGame';\n\nconst BLACK = false\nconst WHITE = true\n\nconst soundEffects = {\n  whiteMove: \"./whiteMove.wav\",\n  blackMove: \"./blackMove.wav\"\n}\n\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  static defaultProps = {\n    nRows: 8,\n    nCols: 8,\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false, \n      promotePawn: false, \n      \n    }\n    this.resetBoard = this.resetBoard.bind(this);\n    this.dropMove = this.dropMove.bind(this);\n  }\n  // Checks to see if another piece is selected\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n    if ((board[or][oc].type === board[r][c].type) && !(or === r && oc === c)) {\n      return true;\n    }\n    return false;\n  }\n  // Called when player clicks on a piece\n  selectPiece(selectedPiecePos) {\n    const [r, c] = selectedPiecePos;\n    const {board, lastSelectedPiecePos, kingPos, inCheck, castleCheck, lastEnPassant, draw, turn, promotePawn} = this.state;\n    // If a move is made\n    if (lastSelectedPiecePos && !this.changeSelection(board, lastSelectedPiecePos, selectedPiecePos)) {\n      if (arrayEquals(selectedPiecePos, lastSelectedPiecePos)){\n        this.setState({lastSelectedPiecePos: false, legalMoves: []})\n        return;\n      } \n      const [or, oc] = lastSelectedPiecePos;\n      const lastSelectedPiece = board[or][oc];\n      const retBoard = Game.move(board, lastSelectedPiecePos, selectedPiecePos, lastSelectedPiece, kingPos, inCheck, castleCheck, lastEnPassant, draw, promotePawn);\n      if (retBoard.checkmate) {\n        this.setState({winner: lastSelectedPiece.type, checkmate: true, inCheck: true, legalMoves: [], lastSelectedPiecePos: false, turn: !turn});\n        return;\n      }\n      else if (retBoard.draw) {\n        this.setState({draw: true, legalMoves: [], lastSelectedPiecePos: false, turn: !turn});\n        return;\n      }\n      else if (retBoard.board){\n        this.setState({\n          board: retBoard.board, \n          lastSelectedPiecePos: false, \n          turn: !turn, \n          legalMoves: [], \n          kingPos: retBoard.kingPos, \n          inCheck: retBoard.inCheck, \n          checkmate: retBoard.checkmate, \n          castleCheck: retBoard.castleCheck, \n          lastEnPassant: retBoard.lastEnPassant\n        });\n        if (turn === WHITE) {\n          console.log(\"Soundeffect\");\n          this.playSound(\"./soundEffects/whiteMove.wav\");\n        }\n\n        else this.playSound(\"./soundEffects/blackMove.wav\");\n      } \n      return;\n    }\n    // If piece is selected or switch to another piece\n    const selectedPiece = board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== turn) return;\n    const kIdx = selectedPiece.type? 0 : 1;\n    const cIdx = selectedPiece.type? 0 : 1;\n    // Show legal moves when piece is selected\n    const lMoves = selectedPiece.allowedMoves(board, selectedPiecePos, selectedPiece, kingPos[kIdx], castleCheck[cIdx], lastEnPassant);\n    this.setState({lastSelectedPiecePos: selectedPiecePos, legalMoves: lMoves});\n  }\n  dropMove(selectedPiece, movedSqr) {\n    this.setState({pos: selectedPiece});\n    this.selectPiece(movedSqr);\n  }\n  playSound(src) {\n    const sound = new Howl({src});\n    sound.play();\n  }\n  selectorSquares (pawnPromote) {\n    let arr = [];\n    const [r] = pawnPromote;\n    const turn = (r === 7)? WHITE : BLACK;\n    if (turn === WHITE) {\n      arr.push(\n        new Queen(WHITE, \"w_q\"), \n        new Knight(WHITE, \"w_k\"),\n        new Rook(WHITE, \"w_r\"), \n        new Bishop(WHITE, \"w_b\")\n      );\n    } else {\n      arr.push(\n        new Queen(BLACK, \"b_q\"),\n        new Knight(BLACK, \"b_k\"),\n        new Rook(BLACK, \"b_r\"),\n        new Bishop(BLACK, \"b_b\")\n      );\n    }\n    return arr;\n  }\n  selectSquare (pawnPromote, selectSquares, pos){\n    const [pr, pc] = pawnPromote;\n    const [r, c] = pos;\n    const turn = (r === 7)? WHITE : BLACK;\n    if (turn === WHITE) {\n      if (c === pc && r <= 3) {\n        return selectSquares[r];\n      }\n    } else {\n      if (c === pc && (r <= 4 && r < 8)) {\n        return selectSquares[r - 4];\n      }\n    }\n  }\n  // Resets chessboard state\n  resetBoard(){\n    this.setState({\n      board: setupBoard(), \n      lastSelectedPiecePos: false, \n      turn: WHITE, \n      legalMoves: [], \n      kingPos: [[0, 4], [7, 4]], \n      inCheck: false, \n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false, \n      draw: false,\n      promotePawn: false\n    });\n    Game = new ChessGame();\n  }\n  render(){\n    const {board, lastSelectedPiecePos, turn, legalMoves, inCheck, checkmate, draw, winner, promotePawn} = this.state;\n    let winMessage = <div>{winner? \"White Wins!!!\" : \"Black Wins!!!\"}</div>\n    let chessBoard = [];\n    let cOdd = true;\n    let rOdd = true;\n    let selectorSquares;\n    if (promotePawn) selectorSquares = this.selectorSquares(promotePawn, turn);\n    // Iterated through rows backwards so that white would be at row 0 similar to chess notation\n    for(let r = 7; r >= 0; r--){\n      let row = [] \n      cOdd = rOdd;\n      for(let c = 0; c < this.props.nCols; c++){\n        const sqr = `${String.fromCharCode(97 + c)}${r + 1}`;\n        const isDark = cOdd? true: false;\n        const piece = board[r][c];\n        const pos = [r, c];\n        const isSelected = arrayEquals(pos, lastSelectedPiecePos);\n        const isLegalMove = legalMoves.some(lm => arrayEquals(lm, pos)? true : false);\n        const isDraw = draw && piece instanceof King && (turn === piece.type);\n        const kingInCheck = piece instanceof King && inCheck && (turn === piece.type);\n        if (promotePawn) {\n          const [pr, pc] = promotePawn;\n          const selectorSquare = this.selectorSquare(promotePawn, selectorSquares, pos); \n        }\n        row.push(<Square key={sqr} pos={pos} isDark={isDark} piece={piece} selectPiece={() => this.selectPiece([r,c])} isSelected={isSelected} isLegal={isLegalMove} inCheck={kingInCheck} isCheckmate={checkmate} draw={isDraw} dropMove={this.dropMove} selectorSquare={selectorSquare}/>)\n        cOdd = !cOdd;\n      }\n      chessBoard.push(<tr class=\"Row\" key={r + 1}>{row}</tr>)   \n      rOdd = !rOdd;  \n    }\n    // Render Chess Pieces\n    return (\n      <div className=\"Board\">\n        <table className=\"Table\">\n          <tbody>\n            {chessBoard}\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard}className=\"newGame\">New Game</button>\n      </div>\n    );\n  }\n}\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module"}