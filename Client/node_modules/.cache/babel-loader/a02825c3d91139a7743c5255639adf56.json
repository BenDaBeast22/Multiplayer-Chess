{"ast":null,"code":"var _jsxFileName = \"/Users/benjamincritoph/Programming/React/chess/src/Board.js\";\nimport './Board.css';\nimport React from 'react';\nimport Square from './Square';\nimport { Piece, King } from './Pieces';\nimport { arrayEquals, setupBoard } from './Helpers';\nimport ChessGame from './ChessGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BLACK = false;\nconst WHITE = true;\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false\n    };\n    this.resetBoard = this.resetBoard.bind(this);\n  } // Checks to see if another piece is selected\n\n\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n\n    if (board[or][oc].type === board[r][c].type && !(or === r && oc === c)) {\n      return true;\n    }\n\n    return false;\n  } // Called when player clicks on a piece\n\n\n  selectPiece(selectedPiecePos) {\n    const [r, c] = selectedPiecePos;\n    const {\n      board,\n      lastSelectedPiecePos,\n      kingPos,\n      inCheck,\n      castleCheck,\n      lastEnPassant,\n      draw,\n      turn\n    } = this.state; // If a move is made\n\n    if (lastSelectedPiecePos && !this.changeSelection(board, lastSelectedPiecePos, selectedPiecePos)) {\n      if (arrayEquals(selectedPiecePos, lastSelectedPiecePos)) {\n        this.setState({\n          lastSelectedPiecePos: false,\n          legalMoves: []\n        });\n        return;\n      }\n\n      const [or, oc] = lastSelectedPiecePos;\n      const lastSelectedPiece = board[or][oc];\n      const retBoard = Game.move(board, lastSelectedPiecePos, selectedPiecePos, lastSelectedPiece, kingPos, inCheck, castleCheck, lastEnPassant, draw);\n\n      if (retBoard.checkmate) {\n        this.setState({\n          winner: lastSelectedPiece.type,\n          checkmate: true,\n          inCheck: true,\n          legalMoves: [],\n          lastSelectedPiecePos: false,\n          turn: !turn\n        });\n        return;\n      } else if (retBoard.draw) {\n        this.setState({\n          draw: true,\n          legalMoves: [],\n          lastSelectedPiecePos: false,\n          turn: !turn\n        });\n        return;\n      } else if (retBoard.board) {\n        this.setState({\n          board: retBoard.board,\n          lastSelectedPiecePos: false,\n          turn: !turn,\n          legalMoves: [],\n          kingPos: retBoard.kingPos,\n          inCheck: retBoard.inCheck,\n          checkmate: retBoard.checkmate,\n          castleCheck: retBoard.castleCheck,\n          lastEnPassant: retBoard.lastEnPassant\n        });\n      }\n\n      return;\n    } // If piece is selected or switch to another piece\n\n\n    const selectedPiece = board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== turn) return;\n    const kIdx = selectedPiece.type ? 0 : 1;\n    const cIdx = selectedPiece.type ? 0 : 1; // Show legal moves when piece is selected\n\n    const lMoves = selectedPiece.allowedMoves(board, selectedPiecePos, selectedPiece, kingPos[kIdx], castleCheck[cIdx], lastEnPassant);\n    this.setState({\n      lastSelectedPiecePos: selectedPiecePos,\n      legalMoves: lMoves\n    });\n  } // Resets chessboard state\n\n\n  resetBoard() {\n    this.setState({\n      board: setupBoard(),\n      selectedPiece: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false\n    });\n    Game = new ChessGame();\n  }\n\n  render() {\n    const {\n      board,\n      lastSelectedPiecePos,\n      turn,\n      legalMoves,\n      inCheck,\n      checkmate,\n      draw,\n      winner\n    } = this.state;\n\n    let winMessage = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: winner ? \"White Wins!!!\" : \"Black Wins!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 22\n    }, this);\n\n    let chessBoard = [];\n    let cOdd = true;\n    let rOdd = true; // Iterated through rows backwards so that white would be at row 0 similar to chess notation\n\n    for (let i = 7; i >= 0; i--) {\n      let row = [];\n      cOdd = rOdd;\n\n      for (let j = 0; j < this.props.nCols; j++) {\n        const sqr = `${String.fromCharCode(97 + j)}${i}`;\n        const isDark = cOdd ? true : false;\n        const piece = board[i][j];\n        const pos = [i, j];\n        const isSelected = arrayEquals(pos, lastSelectedPiecePos);\n        const isLegalMove = legalMoves.some(lm => arrayEquals(lm, pos) ? true : false);\n        const isCheckmate = checkmate;\n        const isDraw = draw && piece instanceof King && turn === piece.type;\n        const kingInCheck = piece instanceof King && inCheck && turn === piece.type;\n        row.push( /*#__PURE__*/_jsxDEV(Square, {\n          isDark: isDark,\n          piece: piece,\n          selectPiece: () => this.selectPiece([i, j]),\n          isSelected: isSelected,\n          isLegal: isLegalMove,\n          inCheck: kingInCheck,\n          isCheckmate: isCheckmate,\n          draw: isDraw\n        }, sqr, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 18\n        }, this));\n        cOdd = !cOdd;\n      }\n\n      chessBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 23\n      }, this));\n      rOdd = !rOdd;\n    } // Render Chess Pieces\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Table\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: chessBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetBoard,\n        className: \"Reset\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  nRows: 8,\n  nCols: 8\n};\nexport default Board;","map":{"version":3,"names":["React","Square","Piece","King","arrayEquals","setupBoard","ChessGame","BLACK","WHITE","Game","Board","Component","constructor","props","state","board","lastSelectedPiecePos","turn","legalMoves","kingPos","inCheck","checkmate","winner","castleCheck","lastEnPassant","draw","resetBoard","bind","changeSelection","selectedPiece","newPos","r","c","or","oc","type","selectPiece","selectedPiecePos","setState","lastSelectedPiece","retBoard","move","kIdx","cIdx","lMoves","allowedMoves","render","winMessage","chessBoard","cOdd","rOdd","i","row","j","nCols","sqr","String","fromCharCode","isDark","piece","pos","isSelected","isLegalMove","some","lm","isCheckmate","isDraw","kingInCheck","push","defaultProps","nRows"],"sources":["/Users/benjamincritoph/Programming/React/chess/src/Board.js"],"sourcesContent":["import './Board.css'\nimport React from 'react'\nimport Square from './Square';\nimport {Piece, King} from './Pieces';\nimport { arrayEquals, setupBoard } from './Helpers';\nimport ChessGame from './ChessGame';\n\nconst BLACK = false\nconst WHITE = true\n\nlet Game = new ChessGame();\n\nclass Board extends React.Component {\n  static defaultProps = {\n    nRows: 8,\n    nCols: 8,\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: setupBoard(),\n      lastSelectedPiecePos: false,\n      turn: WHITE,\n      legalMoves: [],\n      kingPos: [[0, 4], [7, 4]],\n      inCheck: false,\n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false,\n      draw: false\n    }\n    this.resetBoard = this.resetBoard.bind(this);\n  }\n  // Checks to see if another piece is selected\n  changeSelection(board, selectedPiece, newPos) {\n    const [r, c] = newPos;\n    const [or, oc] = selectedPiece;\n    if ((board[or][oc].type === board[r][c].type) && !(or === r && oc === c)) {\n      return true;\n    }\n    return false;\n  }\n  // Called when player clicks on a piece\n  selectPiece(selectedPiecePos) {\n    const [r, c] = selectedPiecePos;\n    const {board, lastSelectedPiecePos, kingPos, inCheck, castleCheck, lastEnPassant, draw, turn} = this.state;\n    // If a move is made\n    if (lastSelectedPiecePos && !this.changeSelection(board, lastSelectedPiecePos, selectedPiecePos)) {\n      if (arrayEquals(selectedPiecePos, lastSelectedPiecePos)){\n        this.setState({lastSelectedPiecePos: false, legalMoves: []})\n        return;\n      } \n      const [or, oc] = lastSelectedPiecePos;\n      const lastSelectedPiece = board[or][oc];\n      const retBoard = Game.move(board, lastSelectedPiecePos, selectedPiecePos, lastSelectedPiece, kingPos, inCheck, castleCheck, lastEnPassant, draw);\n      if (retBoard.checkmate) {\n        this.setState({winner: lastSelectedPiece.type, checkmate: true, inCheck: true, legalMoves: [], lastSelectedPiecePos: false, turn: !turn});\n        return;\n      }\n      else if (retBoard.draw) {\n        this.setState({draw: true, legalMoves: [], lastSelectedPiecePos: false, turn: !turn});\n        return;\n      }\n      else if (retBoard.board){\n        this.setState({\n          board: retBoard.board, \n          lastSelectedPiecePos: false, \n          turn: !turn, \n          legalMoves: [], \n          kingPos: retBoard.kingPos, \n          inCheck: retBoard.inCheck, \n          checkmate: retBoard.checkmate, \n          castleCheck: retBoard.castleCheck, \n          lastEnPassant: retBoard.lastEnPassant\n        });\n      } \n      return;\n    }\n    // If piece is selected or switch to another piece\n    const selectedPiece = board[r][c];\n    if (!selectedPiece instanceof Piece || selectedPiece.type !== turn) return;\n    const kIdx = selectedPiece.type? 0 : 1;\n    const cIdx = selectedPiece.type? 0 : 1;\n    // Show legal moves when piece is selected\n    const lMoves = selectedPiece.allowedMoves(board, selectedPiecePos, selectedPiece, kingPos[kIdx], castleCheck[cIdx], lastEnPassant);\n    this.setState({lastSelectedPiecePos: selectedPiecePos, legalMoves: lMoves});\n  }\n  // Resets chessboard state\n  resetBoard(){\n    this.setState({\n      board: setupBoard(), \n      selectedPiece: false, \n      turn: WHITE, \n      legalMoves: [], \n      kingPos: [[0, 4], [7, 4]], \n      inCheck: false, \n      checkmate: false,\n      winner: false,\n      castleCheck: [[true, true, true], [true, true, true]],\n      lastEnPassant: false, \n      draw: false\n    });\n    Game = new ChessGame();\n  }\n  render(){\n    const {board, lastSelectedPiecePos, turn, legalMoves, inCheck, checkmate, draw, winner} = this.state;\n    let winMessage = <div>{winner? \"White Wins!!!\" : \"Black Wins!!!\"}</div>\n    let chessBoard = [];\n    let cOdd = true;\n    let rOdd = true;\n    // Iterated through rows backwards so that white would be at row 0 similar to chess notation\n    for(let i = 7; i >= 0; i--){\n      let row = [] \n      cOdd = rOdd\n      for(let j = 0; j < this.props.nCols; j++){\n        const sqr = `${String.fromCharCode(97 + j)}${i}`\n        const isDark = cOdd? true: false;\n        const piece = board[i][j];\n        const pos = [i, j];\n        const isSelected = arrayEquals(pos, lastSelectedPiecePos);\n        const isLegalMove = legalMoves.some(lm => arrayEquals(lm, pos)? true : false);\n        const isCheckmate = checkmate;\n        const isDraw = draw && piece instanceof King && (turn === piece.type);\n        const kingInCheck = piece instanceof King && inCheck && (turn === piece.type);\n        row.push(<Square key={sqr} isDark={isDark} piece={piece} selectPiece={() => this.selectPiece([i,j])} isSelected={isSelected} isLegal={isLegalMove} inCheck={kingInCheck} isCheckmate={isCheckmate} draw={isDraw}/>)\n        cOdd = !cOdd;\n      }\n      chessBoard.push(<tr key={i}>{row}</tr>)   \n      rOdd = !rOdd;  \n    }\n    // Render Chess Pieces\n    return (\n      <div className=\"Board\">\n        <table className=\"Table\">\n          <tbody>\n            {chessBoard}\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard}className=\"Reset\">Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module"}