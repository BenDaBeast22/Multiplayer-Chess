{"ast":null,"code":"import { arrayEquals } from './Helpers';\nimport { King, Rook, Pawn, Piece } from './Pieces';\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor() {\n    this.turn = WHITE;\n  }\n\n  isLegalMove(legalMoves, endPos) {\n    // Check that move is legal\n    for (let move of legalMoves) {\n      if (arrayEquals(move, endPos)) {\n        return true;\n      }\n    }\n  }\n\n  checkedOpponent(board, turn, oppKingPos) {\n    const squaresCovered = this.squaresCovered(board, turn);\n\n    for (let sqr of squaresCovered) {\n      if (arrayEquals(sqr, oppKingPos)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  squaresCovered(board, turn) {\n    let squaresCovered = [];\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n\n          if (turn === piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n\n    return squaresCovered;\n  }\n\n  isCheckmate(board, piece, kingOppPos) {\n    // Check every move you can to see if opponent can get out of check \n    const kingOppStartPos = kingOppPos;\n\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const oppStartPos = board[r][c];\n\n        if (oppStartPos instanceof Piece && oppStartPos.type !== piece.type) {\n          let lMoves; // Need to check allowed moves for king since piece that king cannot take could be putting him in check\n\n          if (oppStartPos instanceof King) lMoves = oppStartPos.allowedMoves(board, [r, c], board[r][c], kingOppPos);else lMoves = oppStartPos.legalMoves(board, [r, c], board[r][c]);\n\n          for (let move of lMoves) {\n            const [x, y] = move;\n            let originalPos = board[r][c];\n            let moveSquare = board[x][y];\n            board[r][c] = \"-\";\n            board[x][y] = oppStartPos;\n            if (oppStartPos instanceof King) kingOppPos = [x, y];\n            const squaresCovered = this.squaresCovered(board, piece.type);\n\n            if (!squaresCovered.some(s => arrayEquals(s, kingOppPos))) {\n              board[r][c] = originalPos;\n              board[x][y] = moveSquare;\n              if (oppStartPos instanceof King) kingOppPos = kingOppStartPos;\n              return false;\n            }\n\n            board[x][y] = moveSquare;\n            board[r][c] = originalPos;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  kingUnderAttack(board, startPos, endPos, piece, kingPos) {\n    if (piece instanceof King) kingPos = endPos;\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    const endPiece = board[x][y];\n    board[a][b] = \"-\";\n    board[x][y] = piece; // Check move doesn't allow king to be attacked\n\n    const sqrsCovered = this.opposingSquaresCovered(board, piece.type);\n\n    for (let move of sqrsCovered) {\n      if (arrayEquals(move, kingPos)) {\n        board[x][y] = endPiece;\n        board[a][b] = piece;\n        return true;\n      }\n    }\n\n    board[x][y] = endPiece;\n    board[a][b] = piece;\n    return false;\n  }\n\n  draw(board, piece, kingOppPos, castleCheck, lastEnPassant) {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const oppPiece = board[r][c];\n        const cIdx = piece.type ? 0 : 1;\n\n        if (oppPiece instanceof Piece && oppPiece.type !== piece.type) {\n          const lMoves = oppPiece.allowedMoves(board, [r, c], oppPiece, kingOppPos, castleCheck[cIdx], lastEnPassant);\n\n          if (lMoves.length > 0) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  move(board, startPos, endPos, piece, kingPos, putInCheck, castleCheck, lastEnPassant, draw) {\n    const [a, b] = startPos;\n    let [x, y] = endPos;\n    let inCheck = false;\n    let checkmate = false;\n    let enPassantSet = false;\n    const kIdx = piece.type ? 0 : 1;\n    const kOppIdx = kIdx ? 0 : 1;\n    const cIdx = piece.type ? 0 : 1; // return [board, kingPos, inCheck, checkmate, castleCheck, lastEnPassant, draw]\n\n    const retBoard = {\n      board: board,\n      lastSelectedPiecePos: false,\n      kingPos: kingPos,\n      inCheck: inCheck,\n      checkmate: checkmate,\n      castleCheck: castleCheck,\n      lastEnPassant: lastEnPassant,\n      draw: draw\n    };\n    const legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx], castleCheck[cIdx], retBoard.lastEnPassant);\n\n    if (this.isLegalMove(legalMoves, endPos)) {\n      // If moving piece is king adjust kingPos and castle rights set to false\n      if (piece instanceof King) {\n        const kColDiff = y - b;\n        const rIdx = piece.type ? 0 : 7; // Right Castles\n\n        if (!putInCheck && kColDiff === 2) {\n          kingPos[kIdx] = endPos;\n          board[rIdx][5] = board[rIdx][7];\n          board[rIdx][7] = \"-\";\n        } // Left Castles\n        else if (!putInCheck && (kColDiff === -2 || kColDiff === -3)) {\n          kingPos[kIdx] = [rIdx, 2];\n          y = 2;\n          board[rIdx][3] = board[rIdx][0];\n          board[rIdx][0] = \"-\";\n        } // Move King without castling\n        else {\n          kingPos[kIdx] = endPos;\n          castleCheck[cIdx][1] = false;\n        }\n      } else if (piece instanceof Rook) {\n        if (a === 0) castleCheck[cIdx][0] = false;else if (a === 7) castleCheck[cIdx][2] = false;\n      } else if (piece instanceof Pawn) {\n        // Set the lastEnPassant \n        if (a === 1 && x === 3 || a === 6 && x === 4) {\n          const backOne = piece.type ? -1 : 1;\n          retBoard.lastEnPassant = [x + backOne, y];\n          enPassantSet = true;\n        } // If lastEnPassant move occurs do it\n\n\n        if (arrayEquals(endPos, retBoard.lastEnPassant)) {\n          const er = piece.type ? x - 1 : x + 1;\n          board[er][y] = \"-\";\n        } // If pawn reaches end of board promote pawn and trigger piece selector\n\n\n        if (x === 7 || x === 0) {\n          retBoard.promotePawn = endPos;\n          retBoard.lastSelectedPiecePos = startPos;\n          console.log(retBoard.promotePawn);\n        }\n      }\n\n      if (!enPassantSet) retBoard.lastEnPassant = false;\n      board[a][b] = \"-\";\n      board[x][y] = piece; // Sets check in state if put opponent in check\n\n      const inCheck = this.checkedOpponent(board, piece.type, kingPos[kOppIdx]); // Returns checkmate if opponent in check and can't get out of check\n\n      if (inCheck && this.isCheckmate(board, piece, kingPos[kOppIdx])) {\n        retBoard.inCheck = true;\n        retBoard.checkmate = true;\n        return retBoard;\n      }\n\n      const [kr, kc] = kingPos[kOppIdx];\n      const oppKing = board[kr][kc]; // Returns draw if other player has no moves they can make\n\n      if (oppKing.allowedMoves(board, [kr, kc], oppKing, kingPos[kOppIdx], castleCheck[cIdx]).length === 0) {\n        if (this.draw(board, piece, kingPos[kOppIdx], castleCheck, lastEnPassant)) {\n          retBoard.draw = true;\n          return retBoard;\n        }\n      }\n\n      retBoard.inCheck = inCheck; // retBoard.kingPos = kingPos;\n      // retBoard.lastEnPassant = lastEnPassant;\n\n      return retBoard;\n    }\n\n    retBoard.board = false;\n    return retBoard;\n  }\n\n}\n\nexport default ChessGame;","map":{"version":3,"names":["arrayEquals","King","Rook","Pawn","Piece","BLACK","WHITE","ChessGame","constructor","turn","isLegalMove","legalMoves","endPos","move","checkedOpponent","board","oppKingPos","squaresCovered","sqr","r","c","piece","type","forEach","m","push","isCheckmate","kingOppPos","kingOppStartPos","oppStartPos","lMoves","allowedMoves","x","y","originalPos","moveSquare","some","s","kingUnderAttack","startPos","kingPos","a","b","endPiece","sqrsCovered","opposingSquaresCovered","draw","castleCheck","lastEnPassant","oppPiece","cIdx","length","putInCheck","inCheck","checkmate","enPassantSet","kIdx","kOppIdx","retBoard","lastSelectedPiecePos","kColDiff","rIdx","backOne","er","promotePawn","console","log","kr","kc","oppKing"],"sources":["/Users/benjamincritoph/Programming/React/chess/Client/src/ChessGame.js"],"sourcesContent":["import { arrayEquals } from './Helpers';\nimport { King, Rook, Pawn, Piece } from './Pieces';\n\nconst BLACK = false;\nconst WHITE = true;\n\nclass ChessGame {\n  constructor(){\n    this.turn = WHITE;\n  }\n  isLegalMove(legalMoves, endPos){\n    // Check that move is legal\n    for(let move of legalMoves){\n      if(arrayEquals(move, endPos)){\n        return true;\n      }\n    }\n  }\n  checkedOpponent(board, turn, oppKingPos) {\n    const squaresCovered = this.squaresCovered(board, turn);\n    for (let sqr of squaresCovered) {\n      if (arrayEquals(sqr, oppKingPos)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  squaresCovered(board, turn) {\n    let squaresCovered = [];\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] instanceof Piece) {\n          const piece = board[r][c];\n          if (turn === piece.type) {\n            piece.legalMoves(board, [r, c], piece).forEach(m => squaresCovered.push(m));\n          }\n        }\n      }\n    }\n    return squaresCovered;\n  }\n  isCheckmate(board, piece, kingOppPos){\n    // Check every move you can to see if opponent can get out of check \n    const kingOppStartPos = kingOppPos;\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const oppStartPos = board[r][c];\n        if (oppStartPos instanceof Piece && oppStartPos.type !== piece.type) {\n          let lMoves;\n          // Need to check allowed moves for king since piece that king cannot take could be putting him in check\n          if (oppStartPos instanceof King) lMoves = oppStartPos.allowedMoves(board, [r, c], board[r][c], kingOppPos);\n          else lMoves = oppStartPos.legalMoves(board, [r, c], board[r][c]);\n          for (let move of lMoves) {\n            const [x, y] = move;\n            let originalPos = board[r][c];\n            let moveSquare = board[x][y]; \n            board[r][c] = \"-\";\n            board[x][y] = oppStartPos;\n            if (oppStartPos instanceof King) kingOppPos = [x, y];\n            const squaresCovered = this.squaresCovered(board, piece.type);\n            if (!squaresCovered.some(s => arrayEquals(s, kingOppPos))) {\n              board[r][c] = originalPos;\n              board[x][y] = moveSquare;\n              if (oppStartPos instanceof King) kingOppPos = kingOppStartPos;\n              return false;\n            }\n            board[x][y] = moveSquare;\n            board[r][c] = originalPos;\n          }\n        }\n      }\n    }\n    return true;\n  }\n  kingUnderAttack(board, startPos, endPos, piece, kingPos) {\n    if (piece instanceof King) kingPos = endPos;\n    const [a, b] = startPos;\n    const [x, y] = endPos;\n    const endPiece = board[x][y];\n    board[a][b] = \"-\";\n    board[x][y] = piece;\n    // Check move doesn't allow king to be attacked\n    const sqrsCovered = this.opposingSquaresCovered(board, piece.type);\n    for (let move of sqrsCovered) {\n      if (arrayEquals(move, kingPos)) {\n        board[x][y] = endPiece;\n        board[a][b] = piece;\n        return true;\n      }\n    }\n    board[x][y] = endPiece;\n    board[a][b] = piece;\n    return false;\n  } \n  draw (board, piece, kingOppPos, castleCheck, lastEnPassant) {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const oppPiece = board[r][c];\n        const cIdx = piece.type? 0 : 1;\n        if (oppPiece instanceof Piece && oppPiece.type !== piece.type) {\n          const lMoves = oppPiece.allowedMoves(board, [r, c], oppPiece, kingOppPos, castleCheck[cIdx], lastEnPassant);\n          if (lMoves.length > 0) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n  move(board, startPos, endPos, piece, kingPos, putInCheck, castleCheck, lastEnPassant, draw) {\n    const [a, b] = startPos;\n    let [x, y] = endPos;\n    let inCheck = false;\n    let checkmate = false;\n    let enPassantSet = false;\n    const kIdx = piece.type? 0 : 1;\n    const kOppIdx = kIdx? 0: 1;\n    const cIdx = piece.type? 0 : 1;\n    // return [board, kingPos, inCheck, checkmate, castleCheck, lastEnPassant, draw]\n    const retBoard = {\n      board: board,\n      lastSelectedPiecePos: false,\n      kingPos: kingPos,\n      inCheck: inCheck,\n      checkmate: checkmate,\n      castleCheck: castleCheck,\n      lastEnPassant: lastEnPassant,\n      draw: draw\n    }\n    const legalMoves = piece.allowedMoves(board, startPos, piece, kingPos[kIdx], castleCheck[cIdx], retBoard.lastEnPassant);\n    if (this.isLegalMove(legalMoves, endPos)) {\n      // If moving piece is king adjust kingPos and castle rights set to false\n      if (piece instanceof King) {\n        const kColDiff = y - b;\n        const rIdx = piece.type? 0: 7;\n        // Right Castles\n        if (!putInCheck && kColDiff === 2) {\n          kingPos[kIdx] = endPos;\n          board[rIdx][5] = board[rIdx][7];\n          board[rIdx][7] = \"-\";\n        }\n        // Left Castles\n        else if(!putInCheck && (kColDiff === -2 || kColDiff === -3)) {\n          kingPos[kIdx] = [rIdx, 2];\n          y = 2;\n          board[rIdx][3] = board[rIdx][0];\n          board[rIdx][0] = \"-\";\n        } \n        // Move King without castling\n        else {\n          kingPos[kIdx] = endPos;\n          castleCheck[cIdx][1] = false;\n        }\n      }\n      else if (piece instanceof Rook) {\n        if (a === 0) castleCheck[cIdx][0] = false;\n        else if (a === 7) castleCheck[cIdx][2] = false;\n      }\n      else if (piece instanceof Pawn) {\n        // Set the lastEnPassant \n        if ((a === 1 && x === 3) || (a === 6 && x === 4)) {\n          const backOne = piece.type? -1 : 1;\n          retBoard.lastEnPassant = [x + backOne, y];\n          enPassantSet = true;\n        }\n        // If lastEnPassant move occurs do it\n        if (arrayEquals(endPos, retBoard.lastEnPassant)){\n          const er = piece.type? x - 1 : x + 1;\n          board[er][y] = \"-\";\n        }\n        // If pawn reaches end of board promote pawn and trigger piece selector\n        if (x === 7 || x === 0) {\n          retBoard.promotePawn = endPos;\n          retBoard.lastSelectedPiecePos = startPos;\n          console.log(retBoard.promotePawn);\n        }\n        \n      }\n      if (!enPassantSet) retBoard.lastEnPassant = false;\n      board[a][b] = \"-\";\n      board[x][y] = piece;\n      // Sets check in state if put opponent in check\n      const inCheck = this.checkedOpponent(board, piece.type, kingPos[kOppIdx]);\n      // Returns checkmate if opponent in check and can't get out of check\n      if (inCheck && this.isCheckmate(board, piece, kingPos[kOppIdx])) {\n        retBoard.inCheck = true;\n        retBoard.checkmate = true;\n        return retBoard;\n      }\n      const[kr, kc] = kingPos[kOppIdx];\n      const oppKing = board[kr][kc];\n      // Returns draw if other player has no moves they can make\n      if (oppKing.allowedMoves(board, [kr, kc], oppKing, kingPos[kOppIdx], castleCheck[cIdx]).length === 0) {\n        if (this.draw(board, piece, kingPos[kOppIdx], castleCheck, lastEnPassant)) {\n          retBoard.draw = true;\n          return retBoard;\n        }\n      }\n      retBoard.inCheck = inCheck;\n      // retBoard.kingPos = kingPos;\n      // retBoard.lastEnPassant = lastEnPassant;\n      return retBoard;\n    }\n    retBoard.board = false;\n    return retBoard;\n  }\n}\n\nexport default ChessGame;"],"mappings":"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"},"metadata":{},"sourceType":"module"}